import{_ as e,a as t,b as n,c as a,i as o,d as r,S as s,s as i,T as h,g as c,f as l,e as u,t as d,q as f,n as m,j as g,k as p,h as v,l as w,m as b,o as y,u as E,r as k,p as x,C as I,w as $,x as T,y as P,M as L}from"./client.eda691f8.js";import"./Icon.0e3deb14.js";import{M as C,P as A}from"./MetaTags.6b7c1de8.js";import{H,j as O}from"./index.9c2fd222.js";import{c as S}from"./cover.4038dd1b.js";function j(e){var a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var o,r=t(e);if(a){var s=t(this).constructor;o=Reflect.construct(r,arguments,s)}else o=r.apply(this,arguments);return n(this,o)}}function q(e){var t,n,a,o,r,s,i,L,j,q,D,R,W,M,B,N,F,G,K,z,U,Y,J,_,Q,V,X,Z,ee,te,ne,ae,oe,re,se,ie,he,ce,le,ue,de,fe,me,ge,pe,ve,we,be,ye,Ee,ke,xe,Ie,$e,Te,Pe,Le,Ce,Ae,He,Oe,Se,je,qe,De,Re,We,Me,Be,Ne,Fe,Ge,Ke,ze,Ue,Ye,Je,_e,Qe,Ve,Xe,Ze,et,tt,nt,at,ot,rt,st,it,ht,ct,lt,ut,dt,ft,mt,gt,pt,vt,wt,bt,yt,Et,kt,xt,It,$t,Tt,Pt,Lt,Ct,At,Ht,Ot,St,jt,qt,Dt,Rt,Wt,Mt,Bt,Nt,Ft,Gt,Kt,zt,Ut,Yt,Jt,_t,Qt,Vt,Xt,Zt,en,tn,nn,an,on,rn,sn,hn,cn,ln,un,dn,fn,mn,gn,pn,vn,wn,bn,yn,En,kn,xn,In,$n,Tn,Pn,Ln,Cn,An,Hn;return t=new C({props:{title:"Keeping global state management sane with rel-events",description:"In this post, we'll discuss how to use rel-events to keep your React app's state sane :]",keywords:"rel-events, react, redux, big projects, architecture, planning, frontend, javascript, frameworks"}}),i=new A({props:{date:"2019-10-19",text:e[1]}}),lt=new H({props:{language:O,code:h('\nimport { HTTPEvent } from "rel-events";\n\nexport const LoginEvent = new HTTPEvent({ name: "login" });\n')}}),gt=new H({props:{language:O,code:h('\nimport { HTTPEvent } from "rel-events";\nimport { LoginEventManager } from "./eventManagers";\n\nexport const LoginEvent = new HTTPEvent({\n  name: "login",\n  manager: new LoginEventManager(),\n});\n')}}),yt=new H({props:{language:O,code:h('\nimport { fetchFromApi } from "rel-events";\n\nexport class LoginEventManager {\n  initialState = { isLoading: false, username: "Anonymous" };\n\n  call = (user) => {\n    return () => fetchFromApi(\n      "/api/login",\n      { method: "POST", body: JSON.stringify(user) }\n    );\n  }\n\n  onDispatch = (state, event) => ({\n    ...state,\n    isLoading: true,\n    username: this.initialState.username\n  })\n\n  onSuccess = (state, event) => ({\n    ...state,\n    isLoading: this.initialState.isLoading,\n    username: event.response.data.username\n  })\n\n  onFailure = (state, event) => ({\n    ...state,\n    isLoading: this.initialState.isLoading,\n    username: this.initialState.username,\n    error: event.error.data\n  })\n});\n')}}),$t=new H({props:{language:O,code:h('\n// LoginComponent.js\nimport React from "react";\nimport { LoginEvent } from "./events";\n\nexport class LoginComponent extends React.Component {\n  handleSubmit = () => {\n    const { user } = this.state;\n    // the Event injects its trigger as a prop with its own name ("login")\n    const { login } = this.props;\n\n    login(user);\n  }\n\n  render() {\n    const { username } = this.props;\n    return (\n      <React.Fragment>\n        <h1>Hello, {username}</h1>\n        <form>{ /* inputs and submit button */ }</form>\n      </React.Fragment>\n    );\n  }\n});\n\n// and here, we register the Component in the Event,\n// which injects its trigger as props (as described above),\n// and we also ask for the Events "username" value to be injected as well\nexport default LoginEvent.register({\n  Component: LoginComponent,\n  props: ["username"]\n});\n')}}),{c:function(){c(t.$$.fragment),n=l(),a=u("h1"),o=u("mark"),r=d("Keeping global state management sane with rel-events"),s=l(),c(i.$$.fragment),L=l(),j=u("figure"),q=u("img"),R=l(),W=u("article"),M=u("p"),B=d("Maintaining a big and complex react app is not for amateurs. Whatever you\n    may choose to manage your app state, chances are that it's hard to pick up,\n    like redux, or really convoluted, like making yourself a service layer. With\n    the goal of making it easy for new developers to jump into our projects, we\n    at Labcodes decided it was time to give this problem a little more thought.\n    Our answer was\n    "),N=u("a"),F=d("rel-events"),G=d("."),K=l(),z=u("h2"),U=d("Why another library to manage states?"),Y=l(),J=u("p"),_=u("a"),Q=u("img"),V=l(),X=u("p"),Z=d("Whenever I think of making something new and shiny, this xkcd strip comes to\n    haunt me. Believe me, I don't want to be the kind of person that does\n    everything themselves, and that's one of my grievances with the fork\n    mentality. However, it was about time I did something to address a pesky\n    problem I deal with daily: using whatever library to separate business logic\n    from react components."),ee=l(),te=u("p"),ne=d("At the end of the day, after much thought, I always end up surrendering and\n    running\n    "),ae=u("code"),oe=d("npm install redux react-redux --save"),re=d(". I even shared my basic\n    tools to deal with redux on our\n    "),se=u("a"),ie=u("code"),he=d("react-redux-api-tools"),ce=d("\n    package."),le=l(),ue=u("p"),de=d("And by no means I hate redux; in fact, I love it. It gets the job done, it's\n    ultra flexible, with low side effects. But let's be frank here: the\n    discomfort of reading\n    "),fe=u("code"),me=d("mapStateToProps"),ge=d("\n    for the first time is\n    "),pe=u("strong"),ve=d("real"),we=d(". It took me a long while to properly understand what\n    was going on. Then there are actions, action creators, reducers, dispatches\n    and middlewares, and sagas, and async dispatches; it's neverending."),be=l(),ye=u("p"),Ee=d("After those confusing and long first months, things started to get easier,\n    but way,\n    "),ke=u("strong"),xe=d("way"),Ie=d("\n    too verbose. I always thought that redux felt a lower level tool, and that I\n    was always in need of specifying, step by step, exactly and strictly what\n    and how things should be done. No abstraction at all. A lot of copy and\n    paste, though."),$e=l(),Te=u("p"),Pe=d("I came to the conclusion that it would be nice to have all the features I\n    would like in my redux configuration - a proper HTTP request flow, less\n    repetition, meaningful connection between actions and reducers -, without\n    sacrificing anything. I got the green light to develop internally a solution\n    for that:\n    "),Le=u("code"),Ce=d("rel-events"),Ae=d("."),He=l(),Oe=u("h2"),Se=d("Cool, but what's "),je=u("code"),qe=d("rel-events"),De=d("?"),Re=l(),We=u("p"),Me=u("code"),Be=d("rel-events"),Ne=d("\n    is a React Events Library that takes the concept of events, present in\n    redux, to a higher level of abstraction. It's a thin layer over redux that\n    enables you to stop thinking about actions, reducers, stores and\n    middlewares, so you can focus on what needs to be done: executing domain\n    logic reactively when events pop up."),Fe=l(),Ge=u("p"),Ke=d("To do that, let's imagine a simple scenario: we need to enable a user to log\n    into our app."),ze=l(),Ue=u("p"),Ye=d("You could do the whole request flow inside your components, but\n    "),Je=u("a"),_e=d("as\n      we stated on our previous blog post"),Qe=d(", we don't really recommend doing\n    that - it always ends up messy. We could use redux, but then our junior\n    developers would need to pass that\n    "),Ve=u("code"),Xe=d("mapStateToProps"),Ze=d("\n    hurdle, and sometimes we don't have the luxury of taking our time. We could\n    use sagas, but then redux is back with a vengeance."),et=l(),tt=u("p"),nt=d("Now, forget about actions and reducers and imagine we have an object called\n    LoginEvent. Whenever we call it passing an email and password, things get\n    done and data comes through to the component. Imagine you don't need to know\n    anything but its name. No reducers, no actions, no\n    "),at=u("code"),ot=d("connect"),rt=d("\n    or\n    "),st=u("code"),it=d("mapStateToProps"),ht=d(". It would be something like this:"),ct=l(),c(lt.$$.fragment),ut=l(),dt=u("p"),ft=d("Cool, but what about the whole behavior? Where's the logic to make the\n    request? How to deal with bad requests? Let's say, besides the Event, we\n    have something that manages the event flow, an Event Manager:"),mt=l(),c(gt.$$.fragment),pt=l(),vt=u("p"),wt=d("That's better. But how is this manager implemented? Because, if it needs to\n    deal with the event flow, it needs to do a lot of stuff: know how to make\n    the request and what to do when the request succeeds or fails. Oh, and we\n    need an intermediary state, because we love loading spinners! Hell, I forgot\n    about the inital state of the event as well! Ok, ok, let's see:"),bt=l(),c(yt.$$.fragment),Et=l(),kt=u("p"),xt=d("That's about it, right? But, hey, how do we trigger it? And how do I make\n    the Event register which Components are able to trigger it? How does the\n    component get the data from it? We're almost there:"),It=l(),c($t.$$.fragment),Tt=l(),Pt=u("p"),Lt=d("And that's exactly the current API for a HTTPEvent from\n    "),Ct=u("code"),At=d("rel-events"),Ht=d(". No actions, no reducers, no coupling between the\n    logic and the component layers, nothing. Of course, it needs some\n    configuration to hook it up with redux, but it's mostly a one time setup,\n    very well documented\n    "),Ot=u("a"),St=d("in our\n      docs"),jt=d("."),qt=l(),Dt=u("h2"),Rt=d("That sounds... nice! But what about features? I want features!"),Wt=l(),Mt=u("p"),Bt=d("With our current beta version (0.1.3 as of September 2019), you're able to:"),Nt=l(),Ft=u("ul"),Gt=u("li"),Kt=d("use a basic Event type (for the times you don't need to make HTTP\n      requests);"),zt=l(),Ut=u("li"),Yt=d("chain Events/HTTPEvents (useful for fetching more data when a request is\n      done);"),Jt=l(),_t=u("li"),Qt=d("have multiple Events registering to the same Component (you'll probably\n      have a Component that needs to listen to multiple Events);"),Vt=l(),Xt=u("li"),Zt=d("execute code after dispatching an Event (with\n      "),en=u("code"),tn=d("afterDispatch"),nn=d(");"),an=l(),on=u("li"),rn=d("execute code after a request is successful (with\n      "),sn=u("code"),hn=d("afterSuccess"),cn=d(");"),ln=l(),un=u("li"),dn=d("execute code after a request has failed (with\n      "),fn=u("code"),mn=d("afterFailure"),gn=d(");"),pn=l(),vn=u("li"),wn=d("evaluate if an event should be dispatched or not (with the\n      "),bn=u("code"),yn=d("shouldDispatch"),En=d("\n      method)."),kn=l(),xn=u("p"),In=d("And more! All that without the cognitive burden, the crazy constants, the\n    store names and all the bad developer experience from redux. The best part:\n    no huge learning curve. This post has basically all you need to know to use\n    our lib. Really."),$n=l(),Tn=u("p"),Pn=d("So if you liked it,\n    "),Ln=u("a"),Cn=d("take a look at our github\n      repo"),An=d("\n    to get started and share the love! Thanks for your attention, and see you\n    next time!"),this.h()},l:function(e){var h=f('[data-svelte="svelte-1by3gqx"]',document.head);m(t.$$.fragment,h),h.forEach(g),n=p(e),a=v(e,"H1",{});var c=w(a);o=v(c,"MARK",{});var l=w(o);r=b(l,"Keeping global state management sane with rel-events"),l.forEach(g),c.forEach(g),s=p(e),m(i.$$.fragment,e),L=p(e),j=v(e,"FIGURE",{});var u=w(j);q=v(u,"IMG",{src:!0,alt:!0}),u.forEach(g),R=p(e),W=v(e,"ARTICLE",{});var d=w(W);M=v(d,"P",{});var y=w(M);B=b(y,"Maintaining a big and complex react app is not for amateurs. Whatever you\n    may choose to manage your app state, chances are that it's hard to pick up,\n    like redux, or really convoluted, like making yourself a service layer. With\n    the goal of making it easy for new developers to jump into our projects, we\n    at Labcodes decided it was time to give this problem a little more thought.\n    Our answer was\n    "),N=v(y,"A",{href:!0});var E=w(N);F=b(E,"rel-events"),E.forEach(g),G=b(y,"."),y.forEach(g),K=p(d),z=v(d,"H2",{});var k=w(z);U=b(k,"Why another library to manage states?"),k.forEach(g),Y=p(d),J=v(d,"P",{});var x=w(J);_=v(x,"A",{href:!0});var I=w(_);Q=v(I,"IMG",{src:!0,alt:!0}),I.forEach(g),x.forEach(g),V=p(d),X=v(d,"P",{});var $=w(X);Z=b($,"Whenever I think of making something new and shiny, this xkcd strip comes to\n    haunt me. Believe me, I don't want to be the kind of person that does\n    everything themselves, and that's one of my grievances with the fork\n    mentality. However, it was about time I did something to address a pesky\n    problem I deal with daily: using whatever library to separate business logic\n    from react components."),$.forEach(g),ee=p(d),te=v(d,"P",{});var T=w(te);ne=b(T,"At the end of the day, after much thought, I always end up surrendering and\n    running\n    "),ae=v(T,"CODE",{});var P=w(ae);oe=b(P,"npm install redux react-redux --save"),P.forEach(g),re=b(T,". I even shared my basic\n    tools to deal with redux on our\n    "),se=v(T,"A",{href:!0});var C=w(se);ie=v(C,"CODE",{});var A=w(ie);he=b(A,"react-redux-api-tools"),A.forEach(g),C.forEach(g),ce=b(T,"\n    package."),T.forEach(g),le=p(d),ue=v(d,"P",{});var H=w(ue);de=b(H,"And by no means I hate redux; in fact, I love it. It gets the job done, it's\n    ultra flexible, with low side effects. But let's be frank here: the\n    discomfort of reading\n    "),fe=v(H,"CODE",{});var O=w(fe);me=b(O,"mapStateToProps"),O.forEach(g),ge=b(H,"\n    for the first time is\n    "),pe=v(H,"STRONG",{});var S=w(pe);ve=b(S,"real"),S.forEach(g),we=b(H,". It took me a long while to properly understand what\n    was going on. Then there are actions, action creators, reducers, dispatches\n    and middlewares, and sagas, and async dispatches; it's neverending."),H.forEach(g),be=p(d),ye=v(d,"P",{});var D=w(ye);Ee=b(D,"After those confusing and long first months, things started to get easier,\n    but way,\n    "),ke=v(D,"STRONG",{});var Hn=w(ke);xe=b(Hn,"way"),Hn.forEach(g),Ie=b(D,"\n    too verbose. I always thought that redux felt a lower level tool, and that I\n    was always in need of specifying, step by step, exactly and strictly what\n    and how things should be done. No abstraction at all. A lot of copy and\n    paste, though."),D.forEach(g),$e=p(d),Te=v(d,"P",{});var On=w(Te);Pe=b(On,"I came to the conclusion that it would be nice to have all the features I\n    would like in my redux configuration - a proper HTTP request flow, less\n    repetition, meaningful connection between actions and reducers -, without\n    sacrificing anything. I got the green light to develop internally a solution\n    for that:\n    "),Le=v(On,"CODE",{});var Sn=w(Le);Ce=b(Sn,"rel-events"),Sn.forEach(g),Ae=b(On,"."),On.forEach(g),He=p(d),Oe=v(d,"H2",{});var jn=w(Oe);Se=b(jn,"Cool, but what's "),je=v(jn,"CODE",{});var qn=w(je);qe=b(qn,"rel-events"),qn.forEach(g),De=b(jn,"?"),jn.forEach(g),Re=p(d),We=v(d,"P",{});var Dn=w(We);Me=v(Dn,"CODE",{});var Rn=w(Me);Be=b(Rn,"rel-events"),Rn.forEach(g),Ne=b(Dn,"\n    is a React Events Library that takes the concept of events, present in\n    redux, to a higher level of abstraction. It's a thin layer over redux that\n    enables you to stop thinking about actions, reducers, stores and\n    middlewares, so you can focus on what needs to be done: executing domain\n    logic reactively when events pop up."),Dn.forEach(g),Fe=p(d),Ge=v(d,"P",{});var Wn=w(Ge);Ke=b(Wn,"To do that, let's imagine a simple scenario: we need to enable a user to log\n    into our app."),Wn.forEach(g),ze=p(d),Ue=v(d,"P",{});var Mn=w(Ue);Ye=b(Mn,"You could do the whole request flow inside your components, but\n    "),Je=v(Mn,"A",{href:!0});var Bn=w(Je);_e=b(Bn,"as\n      we stated on our previous blog post"),Bn.forEach(g),Qe=b(Mn,", we don't really recommend doing\n    that - it always ends up messy. We could use redux, but then our junior\n    developers would need to pass that\n    "),Ve=v(Mn,"CODE",{});var Nn=w(Ve);Xe=b(Nn,"mapStateToProps"),Nn.forEach(g),Ze=b(Mn,"\n    hurdle, and sometimes we don't have the luxury of taking our time. We could\n    use sagas, but then redux is back with a vengeance."),Mn.forEach(g),et=p(d),tt=v(d,"P",{});var Fn=w(tt);nt=b(Fn,"Now, forget about actions and reducers and imagine we have an object called\n    LoginEvent. Whenever we call it passing an email and password, things get\n    done and data comes through to the component. Imagine you don't need to know\n    anything but its name. No reducers, no actions, no\n    "),at=v(Fn,"CODE",{});var Gn=w(at);ot=b(Gn,"connect"),Gn.forEach(g),rt=b(Fn,"\n    or\n    "),st=v(Fn,"CODE",{});var Kn=w(st);it=b(Kn,"mapStateToProps"),Kn.forEach(g),ht=b(Fn,". It would be something like this:"),Fn.forEach(g),ct=p(d),m(lt.$$.fragment,d),ut=p(d),dt=v(d,"P",{});var zn=w(dt);ft=b(zn,"Cool, but what about the whole behavior? Where's the logic to make the\n    request? How to deal with bad requests? Let's say, besides the Event, we\n    have something that manages the event flow, an Event Manager:"),zn.forEach(g),mt=p(d),m(gt.$$.fragment,d),pt=p(d),vt=v(d,"P",{});var Un=w(vt);wt=b(Un,"That's better. But how is this manager implemented? Because, if it needs to\n    deal with the event flow, it needs to do a lot of stuff: know how to make\n    the request and what to do when the request succeeds or fails. Oh, and we\n    need an intermediary state, because we love loading spinners! Hell, I forgot\n    about the inital state of the event as well! Ok, ok, let's see:"),Un.forEach(g),bt=p(d),m(yt.$$.fragment,d),Et=p(d),kt=v(d,"P",{});var Yn=w(kt);xt=b(Yn,"That's about it, right? But, hey, how do we trigger it? And how do I make\n    the Event register which Components are able to trigger it? How does the\n    component get the data from it? We're almost there:"),Yn.forEach(g),It=p(d),m($t.$$.fragment,d),Tt=p(d),Pt=v(d,"P",{});var Jn=w(Pt);Lt=b(Jn,"And that's exactly the current API for a HTTPEvent from\n    "),Ct=v(Jn,"CODE",{});var _n=w(Ct);At=b(_n,"rel-events"),_n.forEach(g),Ht=b(Jn,". No actions, no reducers, no coupling between the\n    logic and the component layers, nothing. Of course, it needs some\n    configuration to hook it up with redux, but it's mostly a one time setup,\n    very well documented\n    "),Ot=v(Jn,"A",{href:!0});var Qn=w(Ot);St=b(Qn,"in our\n      docs"),Qn.forEach(g),jt=b(Jn,"."),Jn.forEach(g),qt=p(d),Dt=v(d,"H2",{});var Vn=w(Dt);Rt=b(Vn,"That sounds... nice! But what about features? I want features!"),Vn.forEach(g),Wt=p(d),Mt=v(d,"P",{});var Xn=w(Mt);Bt=b(Xn,"With our current beta version (0.1.3 as of September 2019), you're able to:"),Xn.forEach(g),Nt=p(d),Ft=v(d,"UL",{});var Zn=w(Ft);Gt=v(Zn,"LI",{});var ea=w(Gt);Kt=b(ea,"use a basic Event type (for the times you don't need to make HTTP\n      requests);"),ea.forEach(g),zt=p(Zn),Ut=v(Zn,"LI",{});var ta=w(Ut);Yt=b(ta,"chain Events/HTTPEvents (useful for fetching more data when a request is\n      done);"),ta.forEach(g),Jt=p(Zn),_t=v(Zn,"LI",{});var na=w(_t);Qt=b(na,"have multiple Events registering to the same Component (you'll probably\n      have a Component that needs to listen to multiple Events);"),na.forEach(g),Vt=p(Zn),Xt=v(Zn,"LI",{});var aa=w(Xt);Zt=b(aa,"execute code after dispatching an Event (with\n      "),en=v(aa,"CODE",{});var oa=w(en);tn=b(oa,"afterDispatch"),oa.forEach(g),nn=b(aa,");"),aa.forEach(g),an=p(Zn),on=v(Zn,"LI",{});var ra=w(on);rn=b(ra,"execute code after a request is successful (with\n      "),sn=v(ra,"CODE",{});var sa=w(sn);hn=b(sa,"afterSuccess"),sa.forEach(g),cn=b(ra,");"),ra.forEach(g),ln=p(Zn),un=v(Zn,"LI",{});var ia=w(un);dn=b(ia,"execute code after a request has failed (with\n      "),fn=v(ia,"CODE",{});var ha=w(fn);mn=b(ha,"afterFailure"),ha.forEach(g),gn=b(ia,");"),ia.forEach(g),pn=p(Zn),vn=v(Zn,"LI",{});var ca=w(vn);wn=b(ca,"evaluate if an event should be dispatched or not (with the\n      "),bn=v(ca,"CODE",{});var la=w(bn);yn=b(la,"shouldDispatch"),la.forEach(g),En=b(ca,"\n      method)."),ca.forEach(g),Zn.forEach(g),kn=p(d),xn=v(d,"P",{});var ua=w(xn);In=b(ua,"And more! All that without the cognitive burden, the crazy constants, the\n    store names and all the bad developer experience from redux. The best part:\n    no huge learning curve. This post has basically all you need to know to use\n    our lib. Really."),ua.forEach(g),$n=p(d),Tn=v(d,"P",{});var da=w(Tn);Pn=b(da,"So if you liked it,\n    "),Ln=v(da,"A",{href:!0});var fa=w(Ln);Cn=b(fa,"take a look at our github\n      repo"),fa.forEach(g),An=b(da,"\n    to get started and share the love! Thanks for your attention, and see you\n    next time!"),da.forEach(g),d.forEach(g),this.h()},h:function(){q.src!==(D=S)&&y(q,"src",D),y(q,"alt","Logos from React and Redux"),y(N,"href","https://github.com/labcodes/rel-events"),Q.src!=="https://imgs.xkcd.com/comics/standards.png"&&y(Q,"src","https://imgs.xkcd.com/comics/standards.png"),y(Q,"alt","xkcd is always right"),y(_,"href","https://xkcd.com/927/"),y(se,"href","https://github.com/labcodes/react-redux-api-tools/"),y(Je,"href","https://labcodes.com.br/blog/en/decoupling-logic-from-react-components.html"),y(Ot,"href","https://github.com/labcodes/rel-events/tree/master/docs"),y(Ln,"href","https://github.com/labcodes/rel-events")},m:function(h,c){E(t,document.head,null),k(h,n,c),k(h,a,c),x(a,o),x(o,r),k(h,s,c),E(i,h,c),k(h,L,c),k(h,j,c),x(j,q),k(h,R,c),k(h,W,c),x(W,M),x(M,B),x(M,N),x(N,F),x(M,G),x(W,K),x(W,z),x(z,U),x(W,Y),x(W,J),x(J,_),x(_,Q),x(W,V),x(W,X),x(X,Z),x(W,ee),x(W,te),x(te,ne),x(te,ae),x(ae,oe),x(te,re),x(te,se),x(se,ie),x(ie,he),x(te,ce),x(W,le),x(W,ue),x(ue,de),x(ue,fe),x(fe,me),x(ue,ge),x(ue,pe),x(pe,ve),x(ue,we),x(W,be),x(W,ye),x(ye,Ee),x(ye,ke),x(ke,xe),x(ye,Ie),x(W,$e),x(W,Te),x(Te,Pe),x(Te,Le),x(Le,Ce),x(Te,Ae),x(W,He),x(W,Oe),x(Oe,Se),x(Oe,je),x(je,qe),x(Oe,De),x(W,Re),x(W,We),x(We,Me),x(Me,Be),x(We,Ne),x(W,Fe),x(W,Ge),x(Ge,Ke),x(W,ze),x(W,Ue),x(Ue,Ye),x(Ue,Je),x(Je,_e),x(Ue,Qe),x(Ue,Ve),x(Ve,Xe),x(Ue,Ze),x(W,et),x(W,tt),x(tt,nt),x(tt,at),x(at,ot),x(tt,rt),x(tt,st),x(st,it),x(tt,ht),x(W,ct),E(lt,W,null),x(W,ut),x(W,dt),x(dt,ft),x(W,mt),E(gt,W,null),x(W,pt),x(W,vt),x(vt,wt),x(W,bt),E(yt,W,null),x(W,Et),x(W,kt),x(kt,xt),x(W,It),E($t,W,null),x(W,Tt),x(W,Pt),x(Pt,Lt),x(Pt,Ct),x(Ct,At),x(Pt,Ht),x(Pt,Ot),x(Ot,St),x(Pt,jt),x(W,qt),x(W,Dt),x(Dt,Rt),x(W,Wt),x(W,Mt),x(Mt,Bt),x(W,Nt),x(W,Ft),x(Ft,Gt),x(Gt,Kt),x(Ft,zt),x(Ft,Ut),x(Ut,Yt),x(Ft,Jt),x(Ft,_t),x(_t,Qt),x(Ft,Vt),x(Ft,Xt),x(Xt,Zt),x(Xt,en),x(en,tn),x(Xt,nn),x(Ft,an),x(Ft,on),x(on,rn),x(on,sn),x(sn,hn),x(on,cn),x(Ft,ln),x(Ft,un),x(un,dn),x(un,fn),x(fn,mn),x(un,gn),x(Ft,pn),x(Ft,vn),x(vn,wn),x(vn,bn),x(bn,yn),x(vn,En),x(W,kn),x(W,xn),x(xn,In),x(W,$n),x(W,Tn),x(Tn,Pn),x(Tn,Ln),x(Ln,Cn),x(Tn,An),e[2](W),Hn=!0},p:function(e,t){var n={};2&I(t,1)[0]&&(n.text=e[1]),i.$set(n)},i:function(e){Hn||($(t.$$.fragment,e),$(i.$$.fragment,e),$(lt.$$.fragment,e),$(gt.$$.fragment,e),$(yt.$$.fragment,e),$($t.$$.fragment,e),Hn=!0)},o:function(e){T(t.$$.fragment,e),T(i.$$.fragment,e),T(lt.$$.fragment,e),T(gt.$$.fragment,e),T(yt.$$.fragment,e),T($t.$$.fragment,e),Hn=!1},d:function(o){P(t),o&&g(n),o&&g(a),o&&g(s),P(i,o),o&&g(L),o&&g(j),o&&g(R),o&&g(W),P(lt),P(gt),P(yt),P($t),e[2](null)}}}function D(e,t,n){var a,o;return e.$$.update=function(){1&e.$$.dirty&&n(1,o=a&&a.textContent)},[a,o,function(e){L[e?"unshift":"push"]((function(){n(0,a=e)}))}]}var R=function(t){e(h,s);var n=j(h);function h(e){var t;return a(this,h),t=n.call(this),o(r(t),e,D,q,i,{}),t}return h}();export default R;
