import{_ as e,a,b as o,c as r,i as s,d as n,S as t,s as i,J as c,B as d,K as m,L as u,g as l,j as h,C as p,h as f,M as v,q as g,N as b,l as E,o as q}from"./client.b5ae4b81.js";function O(e){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var s,n=a(e);if(r){var t=a(this).constructor;s=Reflect.construct(n,arguments,t)}else s=n.apply(this,arguments);return o(this,s)}}function D(e){var a,o,r,s,n,t,i,O,D,C,x,j,z,G,R,I,w,P,M,H,S,T,N,A,y,F,U,k,K,L,B,J,V,_,Q,W,X,Y,Z,$,ee,ae,oe,re,se,ne,te,ie,ce,de,me,ue,le,he,pe,fe,ve,ge,be,Ee,qe,Oe,De,Ce,xe,je,ze,Ge,Re,Ie,we,Pe,Me,He,Se,Te,Ne,Ae,ye,Fe,Ue,ke,Ke,Le,Be,Je,Ve,_e,Qe,We,Xe,Ye,Ze,$e,ea,aa,oa,ra,sa,na,ta,ia,ca,da,ma,ua,la,ha,pa,fa,va,ga,ba,Ea,qa,Oa,Da,Ca,xa,ja,za,Ga,Ra,Ia,wa,Pa,Ma,Ha,Sa,Ta,Na,Aa,ya,Fa,Ua,ka,Ka,La,Ba,Ja,Va,_a,Qa,Wa,Xa,Ya,Za,$a,eo,ao,oo,ro,so,no,to,io,co,mo,uo,lo,ho,po,fo,vo,go,bo,Eo,qo,Oo,Do,Co,xo,jo,zo,Go,Ro,Io,wo,Po,Mo,Ho,So,To,No,Ao,yo,Fo,Uo,ko,Ko,Lo,Bo,Jo,Vo,_o,Qo,Wo,Xo,Yo,Zo,$o,er,ar,or,rr,sr,nr,tr,ir,cr,dr,mr,ur,lr,hr,pr,fr,vr,gr,br,Er,qr,Or,Dr,Cr,xr,jr,zr,Gr,Rr,Ir,wr,Pr,Mr,Hr,Sr,Tr,Nr,Ar,yr,Fr,Ur,kr,Kr,Lr,Br,Jr,Vr,_r,Qr,Wr,Xr,Yr,Zr,$r,es,as,os,rs,ss,ns,ts,is,cs,ds,ms,us,ls,hs,ps,fs;return{c:function(){a=c("meta"),o=c("meta"),r=d(),s=c("h1"),n=c("mark"),t=m("git e github parte 3: boas práticas de organização de branches"),i=d(),O=c("p"),D=m("2016-02-19"),C=d(),x=c("figure"),j=c("img"),z=d(),G=c("p"),R=m("chegamos à parte 3 dos posts sobre git e github! nos\n  "),I=c("a"),w=m("outros"),P=d(),M=c("a"),H=m("dois"),S=m(",\n  falei sobre o que são o git e o github e slguns conceitos básicos pra começar\n  a usar o git. hoje, vou falar mais sobre algumas boas práticas pra organização\n  de branches, baseado nas sugestões do\n  "),T=c("a"),N=m("git flow"),A=m("."),y=d(),F=c("hr"),U=d(),k=c("h3"),K=m("o que é o git flow?"),L=d(),B=c("p"),J=m("o\n  "),V=c("strong"),_=m("git flow"),Q=m("\n  é uma extensão do git que permite uma maior organização e agilidade na hora de\n  lidar com o git. ele segue uma série de convenções que caracterizam alguns\n  tipos de branches com responsabilidades diferentes, próprias pra cada etapa do\n  processo de desenvolvimento. vou detalhar melhor o papel de cada um dos tipos\n  de branch."),W=d(),X=c("div"),Y=c("p"),Z=c("strong"),$=m("lembre-se:"),ee=d(),ae=c("p"),oe=m("essas são apenas\n    "),re=c("strong"),se=m("sugestões"),ne=m("\n    minhas e das próprias convenções do git flow."),te=d(),ie=c("p"),ce=m("o uso dessas sugestões muda de projeto a projeto, apesar dessas sugestões\n    funcionarem em grande parte dos casos."),de=d(),me=c("h3"),ue=m("branch "),le=c("code"),he=m("master/main"),pe=d(),fe=c("figure"),ve=c("img"),ge=d(),be=c("p"),Ee=m("o branch\n  "),qe=c("code"),Oe=m("master"),De=m("\n  (ou, preferivelmente,\n  "),Ce=c("code"),xe=m("main"),je=m(") é o branch no qual está o código que está em\n  "),ze=c("strong"),Ge=m("produção"),Re=m(", ou seja, que está sendo\n  "),Ie=c("strong"),we=m("diretamente usado pelos clientes"),Pe=m(". ele é caracterizado por sua\n  grande quantidade de\n  "),Me=c("strong"),He=m("tags"),Se=m(", que refletem cada versão do projeto que foi pra uso\n  corrente. nele, não se deve ter commits soltos; devemos apenas adicionar\n  commits nele através de merges de branches de\n  "),Te=c("code"),Ne=m("release"),Ae=m("\n  e de\n  "),ye=c("code"),Fe=m("hotfix"),Ue=m("."),ke=d(),Ke=c("h3"),Le=m("branch "),Be=c("code"),Je=m("develop"),Ve=d(),_e=c("figure"),Qe=c("img"),We=d(),Xe=c("p"),Ye=m("o branch\n  "),Ze=c("code"),$e=m("develop"),ea=m("\n  é o que contém o código previsto para a próxima\n  "),aa=c("code"),oa=m("release"),ra=m(", ou seja, o próximo código que irá pro ar. nele, também\n  não devemos commitar diretamente, deixando que seu código seja fornecido pelos\n  branches de\n  "),sa=c("code"),na=m("feature"),ta=m("\n  e\n  "),ia=c("code"),ca=m("hotfix"),da=m(", mas essa regra é um pouco mais flexível que a do\n  "),ma=c("code"),ua=m("master"),la=m(". uma boa prática é sempre deixá-lo estável, pronto para ir\n  para o ar a qualquer momento, para evitar que uma funcionalidade não vá pro ar\n  por causa de instabilidade de outras."),ha=d(),pa=c("h3"),fa=m("branches de "),va=c("code"),ga=m("release"),ba=d(),Ea=c("figure"),qa=c("img"),Oa=d(),Da=c("p"),Ca=m("os branches de\n  "),xa=c("code"),ja=m("release"),za=m("\n  são aqueles que resumem o que uma nova versão do seu projeto terá. ele tem a\n  responsabilidade de sair do\n  "),Ga=c("code"),Ra=m("develop"),Ia=m(", se mergear no\n  "),wa=c("code"),Pa=m("master"),Ma=m("\n  e no\n  "),Ha=c("code"),Sa=m("develop"),Ta=m("\n  e, ao mergear no\n  "),Na=c("code"),Aa=m("master"),ya=m(", criar uma\n  "),Fa=c("code"),Ua=m("tag"),ka=m("\n  com o número da nova versão. geralmente, recebem o nome\n  "),Ka=c("code"),La=m("release/[numero-da-versao]"),Ba=m(". na minha experiência, acho uma má\n  ideia commitar em branches de\n  "),Ja=c("code"),Va=m("release"),_a=m(", pelo simples motivo que, assim, temos certeza de que\n  todo o código veio dos\n  "),Qa=c("code"),Wa=m("hotfixes"),Xa=m("\n  e das\n  "),Ya=c("code"),Za=m("features"),$a=m(". dessa forma, os branches de\n  "),eo=c("code"),ao=m("release"),oo=m("\n  servem\n  "),ro=c("strong"),so=m("apenas como um ritual"),no=m("\n  para que você tenha\n  "),to=c("strong"),io=m("certeza"),co=m("\n  do que está colocando no ar e qual é a versão desejada. é uma burocracia que\n  já salvou minha vida algumas vezes. ;)"),mo=d(),uo=c("h3"),lo=m("branches de "),ho=c("code"),po=m("hotfix"),fo=d(),vo=c("figure"),go=c("img"),bo=d(),Eo=c("p"),qo=m("os branches de\n  "),Oo=c("code"),Do=m("hotfix"),Co=m("\n  são os que são abertos na hora que algo em produção dá problema. são branches\n  criados a partir do\n  "),xo=c("code"),jo=m("master"),zo=m("\n  e que se mergeiam novamente no\n  "),Go=c("code"),Ro=m("master"),Io=m("\n  e no\n  "),wo=c("code"),Po=m("develop"),Mo=m(", já que precisamos das correções também no código que\n  está sendo desenvolvido. geralmente, recebem o nome\n  "),Ho=c("code"),So=m("hotfix/[numero-da-versao]"),To=m(". eles também recebem suas próprias\n  "),No=c("code"),Ao=m("tags"),yo=m(", que servem para dizer que, nesta versão, o problema x foi\n  corrigido."),Fo=d(),Uo=c("h3"),ko=m("branches de "),Ko=c("code"),Lo=m("feature"),Bo=d(),Jo=c("figure"),Vo=c("img"),_o=d(),Qo=c("p"),Wo=m("os branches de\n  "),Xo=c("code"),Yo=m("feature"),Zo=m("\n  servem para, bem, features, né. eles partem do\n  "),$o=c("code"),er=m("develop"),ar=m("\n  e mergeiam também no\n  "),or=c("code"),rr=m("develop"),sr=m(". geralmente, recebem o nome\n  "),nr=c("code"),tr=m("feature/[descricao-da-funcionalidade]"),ir=m(". neles, commitamos o que é\n  necessário para novas funcionalidades ficarem prontas, apesar de que eu,\n  novamente, não recomendo que sejam feitos commits diretamente nele. o motivo\n  disso é que, ao meu ver, features têm a tendência de terem muitos commits, o\n  que deixaria difícil a revisão do código em um\n  "),cr=c("em"),dr=m("pull request"),mr=m(". recomendo que, a partir dos branches de\n  "),ur=c("code"),lr=m("feature"),hr=m(", sejam criados branches de\n  "),pr=c("code"),fr=m("topic"),vr=m(", que terão o conteúdo de uma parte da funcionalidade, em um\n  tamanho que permita a fácil revisão do código por outras pessoas."),gr=d(),br=c("h3"),Er=m("branches de "),qr=c("code"),Or=m("topic"),Dr=d(),Cr=c("figure"),xr=c("img"),jr=d(),zr=c("p"),Gr=m("os branches de\n  "),Rr=c("code"),Ir=m("topic"),wr=m("\n  são os coringas. geralmente, recebem o nome\n  "),Pr=c("code"),Mr=m("topic/[nome-do-topico-abordado]"),Hr=m(". são usados em qualquer lugar em\n  que seja legal ter mais de um tópico, para facilitar a revisão de código. na\n  real, uso os branches de\n  "),Sr=c("code"),Tr=m("topic"),Nr=m("\n  saindo dos de\n  "),Ar=c("code"),yr=m("feature"),Fr=m("\n  e mergeando nos mesmos, ou partindo de um branch de\n  "),Ur=c("code"),kr=m("hotfix"),Kr=m("\n  e mergeando nos mesmos. são os menores branches, feitos para serem lidos e\n  revisados rapidamente."),Lr=d(),Br=c("h3"),Jr=m("e o que o git flow tem a ver com isso tudo?"),Vr=d(),_r=c("p"),Qr=m("o git flow, como eu disse, é uma extensão do git. ele cria comandos que servem\n  de atalhos para os processos descritos acima. ele tem comandos para abrir e\n  fechar\n  "),Wr=c("code"),Xr=m("releases"),Yr=m(",\n  "),Zr=c("code"),$r=m("features"),es=m("\n  e\n  "),as=c("code"),os=m("hotfixes"),rs=m(", e é facilmente configurável. se essa organização de\n  branches te interessou, acho que vale a pena dar uma olhada no\n  "),ss=c("a"),ns=m("repositório deles"),ts=m("\n  e ler o\n  "),is=c("a"),cs=m("post sobre\n    o workflow deles"),ds=m(". nesse post, eles detalham melhor o que é realmente\n  necessário ser feito pra realizar essa proposta de organização."),ms=d(),us=c("p"),ls=m("como sempre, qualquer dúvida ou sugestão, é só falar nos comentários. espero\n  que tenham gostado dessa série de posts e que tenha sido útil :D"),hs=d(),ps=c("p"),fs=m("eu fico por aqui, até a próxima! o/"),this.h()},l:function(e){var c=u('[data-svelte="svelte-1idbew5"]',document.head);a=l(c,"META",{name:!0,content:!0}),o=l(c,"META",{name:!0,content:!0}),c.forEach(h),r=p(e),s=l(e,"H1",{});var d=f(s);n=l(d,"MARK",{});var m=f(n);t=v(m,"git e github parte 3: boas práticas de organização de branches"),m.forEach(h),d.forEach(h),i=p(e),O=l(e,"P",{class:!0});var g=f(O);D=v(g,"2016-02-19"),g.forEach(h),C=p(e),x=l(e,"FIGURE",{});var b=f(x);j=l(b,"IMG",{src:!0,alt:!0}),b.forEach(h),z=p(e),G=l(e,"P",{});var E=f(G);R=v(E,"chegamos à parte 3 dos posts sobre git e github! nos\n  "),I=l(E,"A",{href:!0});var q=f(I);w=v(q,"outros"),q.forEach(h),P=p(E),M=l(E,"A",{href:!0});var vs=f(M);H=v(vs,"dois"),vs.forEach(h),S=v(E,",\n  falei sobre o que são o git e o github e slguns conceitos básicos pra começar\n  a usar o git. hoje, vou falar mais sobre algumas boas práticas pra organização\n  de branches, baseado nas sugestões do\n  "),T=l(E,"A",{href:!0});var gs=f(T);N=v(gs,"git flow"),gs.forEach(h),A=v(E,"."),E.forEach(h),y=p(e),F=l(e,"HR",{}),U=p(e),k=l(e,"H3",{});var bs=f(k);K=v(bs,"o que é o git flow?"),bs.forEach(h),L=p(e),B=l(e,"P",{});var Es=f(B);J=v(Es,"o\n  "),V=l(Es,"STRONG",{});var qs=f(V);_=v(qs,"git flow"),qs.forEach(h),Q=v(Es,"\n  é uma extensão do git que permite uma maior organização e agilidade na hora de\n  lidar com o git. ele segue uma série de convenções que caracterizam alguns\n  tipos de branches com responsabilidades diferentes, próprias pra cada etapa do\n  processo de desenvolvimento. vou detalhar melhor o papel de cada um dos tipos\n  de branch."),Es.forEach(h),W=p(e),X=l(e,"DIV",{class:!0});var Os=f(X);Y=l(Os,"P",{});var Ds=f(Y);Z=l(Ds,"STRONG",{});var Cs=f(Z);$=v(Cs,"lembre-se:"),Cs.forEach(h),Ds.forEach(h),ee=p(Os),ae=l(Os,"P",{});var xs=f(ae);oe=v(xs,"essas são apenas\n    "),re=l(xs,"STRONG",{});var js=f(re);se=v(js,"sugestões"),js.forEach(h),ne=v(xs,"\n    minhas e das próprias convenções do git flow."),xs.forEach(h),te=p(Os),ie=l(Os,"P",{});var zs=f(ie);ce=v(zs,"o uso dessas sugestões muda de projeto a projeto, apesar dessas sugestões\n    funcionarem em grande parte dos casos."),zs.forEach(h),Os.forEach(h),de=p(e),me=l(e,"H3",{});var Gs=f(me);ue=v(Gs,"branch "),le=l(Gs,"CODE",{});var Rs=f(le);he=v(Rs,"master/main"),Rs.forEach(h),Gs.forEach(h),pe=p(e),fe=l(e,"FIGURE",{});var Is=f(fe);ve=l(Is,"IMG",{src:!0,alt:!0}),Is.forEach(h),ge=p(e),be=l(e,"P",{});var ws=f(be);Ee=v(ws,"o branch\n  "),qe=l(ws,"CODE",{});var Ps=f(qe);Oe=v(Ps,"master"),Ps.forEach(h),De=v(ws,"\n  (ou, preferivelmente,\n  "),Ce=l(ws,"CODE",{});var Ms=f(Ce);xe=v(Ms,"main"),Ms.forEach(h),je=v(ws,") é o branch no qual está o código que está em\n  "),ze=l(ws,"STRONG",{});var Hs=f(ze);Ge=v(Hs,"produção"),Hs.forEach(h),Re=v(ws,", ou seja, que está sendo\n  "),Ie=l(ws,"STRONG",{});var Ss=f(Ie);we=v(Ss,"diretamente usado pelos clientes"),Ss.forEach(h),Pe=v(ws,". ele é caracterizado por sua\n  grande quantidade de\n  "),Me=l(ws,"STRONG",{});var Ts=f(Me);He=v(Ts,"tags"),Ts.forEach(h),Se=v(ws,", que refletem cada versão do projeto que foi pra uso\n  corrente. nele, não se deve ter commits soltos; devemos apenas adicionar\n  commits nele através de merges de branches de\n  "),Te=l(ws,"CODE",{});var Ns=f(Te);Ne=v(Ns,"release"),Ns.forEach(h),Ae=v(ws,"\n  e de\n  "),ye=l(ws,"CODE",{});var As=f(ye);Fe=v(As,"hotfix"),As.forEach(h),Ue=v(ws,"."),ws.forEach(h),ke=p(e),Ke=l(e,"H3",{});var ys=f(Ke);Le=v(ys,"branch "),Be=l(ys,"CODE",{});var Fs=f(Be);Je=v(Fs,"develop"),Fs.forEach(h),ys.forEach(h),Ve=p(e),_e=l(e,"FIGURE",{});var Us=f(_e);Qe=l(Us,"IMG",{src:!0,alt:!0}),Us.forEach(h),We=p(e),Xe=l(e,"P",{});var ks=f(Xe);Ye=v(ks,"o branch\n  "),Ze=l(ks,"CODE",{});var Ks=f(Ze);$e=v(Ks,"develop"),Ks.forEach(h),ea=v(ks,"\n  é o que contém o código previsto para a próxima\n  "),aa=l(ks,"CODE",{});var Ls=f(aa);oa=v(Ls,"release"),Ls.forEach(h),ra=v(ks,", ou seja, o próximo código que irá pro ar. nele, também\n  não devemos commitar diretamente, deixando que seu código seja fornecido pelos\n  branches de\n  "),sa=l(ks,"CODE",{});var Bs=f(sa);na=v(Bs,"feature"),Bs.forEach(h),ta=v(ks,"\n  e\n  "),ia=l(ks,"CODE",{});var Js=f(ia);ca=v(Js,"hotfix"),Js.forEach(h),da=v(ks,", mas essa regra é um pouco mais flexível que a do\n  "),ma=l(ks,"CODE",{});var Vs=f(ma);ua=v(Vs,"master"),Vs.forEach(h),la=v(ks,". uma boa prática é sempre deixá-lo estável, pronto para ir\n  para o ar a qualquer momento, para evitar que uma funcionalidade não vá pro ar\n  por causa de instabilidade de outras."),ks.forEach(h),ha=p(e),pa=l(e,"H3",{});var _s=f(pa);fa=v(_s,"branches de "),va=l(_s,"CODE",{});var Qs=f(va);ga=v(Qs,"release"),Qs.forEach(h),_s.forEach(h),ba=p(e),Ea=l(e,"FIGURE",{});var Ws=f(Ea);qa=l(Ws,"IMG",{src:!0,alt:!0}),Ws.forEach(h),Oa=p(e),Da=l(e,"P",{});var Xs=f(Da);Ca=v(Xs,"os branches de\n  "),xa=l(Xs,"CODE",{});var Ys=f(xa);ja=v(Ys,"release"),Ys.forEach(h),za=v(Xs,"\n  são aqueles que resumem o que uma nova versão do seu projeto terá. ele tem a\n  responsabilidade de sair do\n  "),Ga=l(Xs,"CODE",{});var Zs=f(Ga);Ra=v(Zs,"develop"),Zs.forEach(h),Ia=v(Xs,", se mergear no\n  "),wa=l(Xs,"CODE",{});var $s=f(wa);Pa=v($s,"master"),$s.forEach(h),Ma=v(Xs,"\n  e no\n  "),Ha=l(Xs,"CODE",{});var en=f(Ha);Sa=v(en,"develop"),en.forEach(h),Ta=v(Xs,"\n  e, ao mergear no\n  "),Na=l(Xs,"CODE",{});var an=f(Na);Aa=v(an,"master"),an.forEach(h),ya=v(Xs,", criar uma\n  "),Fa=l(Xs,"CODE",{});var on=f(Fa);Ua=v(on,"tag"),on.forEach(h),ka=v(Xs,"\n  com o número da nova versão. geralmente, recebem o nome\n  "),Ka=l(Xs,"CODE",{});var rn=f(Ka);La=v(rn,"release/[numero-da-versao]"),rn.forEach(h),Ba=v(Xs,". na minha experiência, acho uma má\n  ideia commitar em branches de\n  "),Ja=l(Xs,"CODE",{});var sn=f(Ja);Va=v(sn,"release"),sn.forEach(h),_a=v(Xs,", pelo simples motivo que, assim, temos certeza de que\n  todo o código veio dos\n  "),Qa=l(Xs,"CODE",{});var nn=f(Qa);Wa=v(nn,"hotfixes"),nn.forEach(h),Xa=v(Xs,"\n  e das\n  "),Ya=l(Xs,"CODE",{});var tn=f(Ya);Za=v(tn,"features"),tn.forEach(h),$a=v(Xs,". dessa forma, os branches de\n  "),eo=l(Xs,"CODE",{});var cn=f(eo);ao=v(cn,"release"),cn.forEach(h),oo=v(Xs,"\n  servem\n  "),ro=l(Xs,"STRONG",{});var dn=f(ro);so=v(dn,"apenas como um ritual"),dn.forEach(h),no=v(Xs,"\n  para que você tenha\n  "),to=l(Xs,"STRONG",{});var mn=f(to);io=v(mn,"certeza"),mn.forEach(h),co=v(Xs,"\n  do que está colocando no ar e qual é a versão desejada. é uma burocracia que\n  já salvou minha vida algumas vezes. ;)"),Xs.forEach(h),mo=p(e),uo=l(e,"H3",{});var un=f(uo);lo=v(un,"branches de "),ho=l(un,"CODE",{});var ln=f(ho);po=v(ln,"hotfix"),ln.forEach(h),un.forEach(h),fo=p(e),vo=l(e,"FIGURE",{});var hn=f(vo);go=l(hn,"IMG",{src:!0,alt:!0}),hn.forEach(h),bo=p(e),Eo=l(e,"P",{});var pn=f(Eo);qo=v(pn,"os branches de\n  "),Oo=l(pn,"CODE",{});var fn=f(Oo);Do=v(fn,"hotfix"),fn.forEach(h),Co=v(pn,"\n  são os que são abertos na hora que algo em produção dá problema. são branches\n  criados a partir do\n  "),xo=l(pn,"CODE",{});var vn=f(xo);jo=v(vn,"master"),vn.forEach(h),zo=v(pn,"\n  e que se mergeiam novamente no\n  "),Go=l(pn,"CODE",{});var gn=f(Go);Ro=v(gn,"master"),gn.forEach(h),Io=v(pn,"\n  e no\n  "),wo=l(pn,"CODE",{});var bn=f(wo);Po=v(bn,"develop"),bn.forEach(h),Mo=v(pn,", já que precisamos das correções também no código que\n  está sendo desenvolvido. geralmente, recebem o nome\n  "),Ho=l(pn,"CODE",{});var En=f(Ho);So=v(En,"hotfix/[numero-da-versao]"),En.forEach(h),To=v(pn,". eles também recebem suas próprias\n  "),No=l(pn,"CODE",{});var qn=f(No);Ao=v(qn,"tags"),qn.forEach(h),yo=v(pn,", que servem para dizer que, nesta versão, o problema x foi\n  corrigido."),pn.forEach(h),Fo=p(e),Uo=l(e,"H3",{});var On=f(Uo);ko=v(On,"branches de "),Ko=l(On,"CODE",{});var Dn=f(Ko);Lo=v(Dn,"feature"),Dn.forEach(h),On.forEach(h),Bo=p(e),Jo=l(e,"FIGURE",{});var Cn=f(Jo);Vo=l(Cn,"IMG",{src:!0,alt:!0}),Cn.forEach(h),_o=p(e),Qo=l(e,"P",{});var xn=f(Qo);Wo=v(xn,"os branches de\n  "),Xo=l(xn,"CODE",{});var jn=f(Xo);Yo=v(jn,"feature"),jn.forEach(h),Zo=v(xn,"\n  servem para, bem, features, né. eles partem do\n  "),$o=l(xn,"CODE",{});var zn=f($o);er=v(zn,"develop"),zn.forEach(h),ar=v(xn,"\n  e mergeiam também no\n  "),or=l(xn,"CODE",{});var Gn=f(or);rr=v(Gn,"develop"),Gn.forEach(h),sr=v(xn,". geralmente, recebem o nome\n  "),nr=l(xn,"CODE",{});var Rn=f(nr);tr=v(Rn,"feature/[descricao-da-funcionalidade]"),Rn.forEach(h),ir=v(xn,". neles, commitamos o que é\n  necessário para novas funcionalidades ficarem prontas, apesar de que eu,\n  novamente, não recomendo que sejam feitos commits diretamente nele. o motivo\n  disso é que, ao meu ver, features têm a tendência de terem muitos commits, o\n  que deixaria difícil a revisão do código em um\n  "),cr=l(xn,"EM",{});var In=f(cr);dr=v(In,"pull request"),In.forEach(h),mr=v(xn,". recomendo que, a partir dos branches de\n  "),ur=l(xn,"CODE",{});var wn=f(ur);lr=v(wn,"feature"),wn.forEach(h),hr=v(xn,", sejam criados branches de\n  "),pr=l(xn,"CODE",{});var Pn=f(pr);fr=v(Pn,"topic"),Pn.forEach(h),vr=v(xn,", que terão o conteúdo de uma parte da funcionalidade, em um\n  tamanho que permita a fácil revisão do código por outras pessoas."),xn.forEach(h),gr=p(e),br=l(e,"H3",{});var Mn=f(br);Er=v(Mn,"branches de "),qr=l(Mn,"CODE",{});var Hn=f(qr);Or=v(Hn,"topic"),Hn.forEach(h),Mn.forEach(h),Dr=p(e),Cr=l(e,"FIGURE",{});var Sn=f(Cr);xr=l(Sn,"IMG",{src:!0,alt:!0}),Sn.forEach(h),jr=p(e),zr=l(e,"P",{});var Tn=f(zr);Gr=v(Tn,"os branches de\n  "),Rr=l(Tn,"CODE",{});var Nn=f(Rr);Ir=v(Nn,"topic"),Nn.forEach(h),wr=v(Tn,"\n  são os coringas. geralmente, recebem o nome\n  "),Pr=l(Tn,"CODE",{});var An=f(Pr);Mr=v(An,"topic/[nome-do-topico-abordado]"),An.forEach(h),Hr=v(Tn,". são usados em qualquer lugar em\n  que seja legal ter mais de um tópico, para facilitar a revisão de código. na\n  real, uso os branches de\n  "),Sr=l(Tn,"CODE",{});var yn=f(Sr);Tr=v(yn,"topic"),yn.forEach(h),Nr=v(Tn,"\n  saindo dos de\n  "),Ar=l(Tn,"CODE",{});var Fn=f(Ar);yr=v(Fn,"feature"),Fn.forEach(h),Fr=v(Tn,"\n  e mergeando nos mesmos, ou partindo de um branch de\n  "),Ur=l(Tn,"CODE",{});var Un=f(Ur);kr=v(Un,"hotfix"),Un.forEach(h),Kr=v(Tn,"\n  e mergeando nos mesmos. são os menores branches, feitos para serem lidos e\n  revisados rapidamente."),Tn.forEach(h),Lr=p(e),Br=l(e,"H3",{});var kn=f(Br);Jr=v(kn,"e o que o git flow tem a ver com isso tudo?"),kn.forEach(h),Vr=p(e),_r=l(e,"P",{});var Kn=f(_r);Qr=v(Kn,"o git flow, como eu disse, é uma extensão do git. ele cria comandos que servem\n  de atalhos para os processos descritos acima. ele tem comandos para abrir e\n  fechar\n  "),Wr=l(Kn,"CODE",{});var Ln=f(Wr);Xr=v(Ln,"releases"),Ln.forEach(h),Yr=v(Kn,",\n  "),Zr=l(Kn,"CODE",{});var Bn=f(Zr);$r=v(Bn,"features"),Bn.forEach(h),es=v(Kn,"\n  e\n  "),as=l(Kn,"CODE",{});var Jn=f(as);os=v(Jn,"hotfixes"),Jn.forEach(h),rs=v(Kn,", e é facilmente configurável. se essa organização de\n  branches te interessou, acho que vale a pena dar uma olhada no\n  "),ss=l(Kn,"A",{href:!0});var Vn=f(ss);ns=v(Vn,"repositório deles"),Vn.forEach(h),ts=v(Kn,"\n  e ler o\n  "),is=l(Kn,"A",{href:!0});var _n=f(is);cs=v(_n,"post sobre\n    o workflow deles"),_n.forEach(h),ds=v(Kn,". nesse post, eles detalham melhor o que é realmente\n  necessário ser feito pra realizar essa proposta de organização."),Kn.forEach(h),ms=p(e),us=l(e,"P",{});var Qn=f(us);ls=v(Qn,"como sempre, qualquer dúvida ou sugestão, é só falar nos comentários. espero\n  que tenham gostado dessa série de posts e que tenha sido útil :D"),Qn.forEach(h),hs=p(e),ps=l(e,"P",{});var Wn=f(ps);fs=v(Wn,"eu fico por aqui, até a próxima! o/"),Wn.forEach(h),this.h()},h:function(){document.title="\n    git e github parte 3: boas práticas de organização de branches -\n    luciano@ratamero.com\n  ",g(a,"name","description"),g(a,"content","Esse post explica os conceitos básicos de Git e como ele interaje com o Github; tudo isso da forma mais didática possível :]"),g(o,"name","keywords"),g(o,"content","Luciano Ratamero, git, github, boas práticas, organização de branches, parte 3"),g(O,"class","meta"),j.src!=="https://lucianoratamero.github.io/img/cover-git-3.png"&&g(j,"src","https://lucianoratamero.github.io/img/cover-git-3.png"),g(j,"alt","Ilustração com logo do git e do github"),g(I,"href","https://lucianoratamero.github.io/blog/git-e-github-parte-1-o-que-sao-e-como-usar/"),g(M,"href","https://lucianoratamero.github.io/blog/git-e-github-parte-2-conceitos-basicos-para-trabalhar-com-git/"),g(T,"href","https://github.com/nvie/gitflow"),g(X,"class","alert alert-info text-center"),ve.src!=="https://lucianoratamero.github.io/img/master.jpg"&&g(ve,"src","https://lucianoratamero.github.io/img/master.jpg"),g(ve,"alt","Ilustração de uma branch principal, chamada master ou main"),Qe.src!=="https://lucianoratamero.github.io/img/develop.jpg"&&g(Qe,"src","https://lucianoratamero.github.io/img/develop.jpg"),g(Qe,"alt","Ilustração de uma branch paralela à principal, chamada develop"),qa.src!=="https://lucianoratamero.github.io/img/release.jpg"&&g(qa,"src","https://lucianoratamero.github.io/img/release.jpg"),g(qa,"alt","Ilustração de uma branch saindo de develop e dando merge na principal"),go.src!=="https://lucianoratamero.github.io/img/hotfix.jpg"&&g(go,"src","https://lucianoratamero.github.io/img/hotfix.jpg"),g(go,"alt","Ilustração de uma branch saindo da principal e dando merge na principal e na develop"),Vo.src!=="https://lucianoratamero.github.io/img/feature.jpg"&&g(Vo,"src","https://lucianoratamero.github.io/img/feature.jpg"),g(Vo,"alt","Ilustração de uma branch saindo da develop e dando merge na develop"),xr.src!=="https://lucianoratamero.github.io/img/topic.jpg"&&g(xr,"src","https://lucianoratamero.github.io/img/topic.jpg"),g(xr,"alt","Ilustração de uma branch saindo de uma feature e mergeando na mesma"),g(ss,"href","https://github.com/nvie/gitflow"),g(is,"href","https://nvie.com/posts/a-successful-git-branching-model/")},m:function(e,c){b(document.head,a),b(document.head,o),E(e,r,c),E(e,s,c),b(s,n),b(n,t),E(e,i,c),E(e,O,c),b(O,D),E(e,C,c),E(e,x,c),b(x,j),E(e,z,c),E(e,G,c),b(G,R),b(G,I),b(I,w),b(G,P),b(G,M),b(M,H),b(G,S),b(G,T),b(T,N),b(G,A),E(e,y,c),E(e,F,c),E(e,U,c),E(e,k,c),b(k,K),E(e,L,c),E(e,B,c),b(B,J),b(B,V),b(V,_),b(B,Q),E(e,W,c),E(e,X,c),b(X,Y),b(Y,Z),b(Z,$),b(X,ee),b(X,ae),b(ae,oe),b(ae,re),b(re,se),b(ae,ne),b(X,te),b(X,ie),b(ie,ce),E(e,de,c),E(e,me,c),b(me,ue),b(me,le),b(le,he),E(e,pe,c),E(e,fe,c),b(fe,ve),E(e,ge,c),E(e,be,c),b(be,Ee),b(be,qe),b(qe,Oe),b(be,De),b(be,Ce),b(Ce,xe),b(be,je),b(be,ze),b(ze,Ge),b(be,Re),b(be,Ie),b(Ie,we),b(be,Pe),b(be,Me),b(Me,He),b(be,Se),b(be,Te),b(Te,Ne),b(be,Ae),b(be,ye),b(ye,Fe),b(be,Ue),E(e,ke,c),E(e,Ke,c),b(Ke,Le),b(Ke,Be),b(Be,Je),E(e,Ve,c),E(e,_e,c),b(_e,Qe),E(e,We,c),E(e,Xe,c),b(Xe,Ye),b(Xe,Ze),b(Ze,$e),b(Xe,ea),b(Xe,aa),b(aa,oa),b(Xe,ra),b(Xe,sa),b(sa,na),b(Xe,ta),b(Xe,ia),b(ia,ca),b(Xe,da),b(Xe,ma),b(ma,ua),b(Xe,la),E(e,ha,c),E(e,pa,c),b(pa,fa),b(pa,va),b(va,ga),E(e,ba,c),E(e,Ea,c),b(Ea,qa),E(e,Oa,c),E(e,Da,c),b(Da,Ca),b(Da,xa),b(xa,ja),b(Da,za),b(Da,Ga),b(Ga,Ra),b(Da,Ia),b(Da,wa),b(wa,Pa),b(Da,Ma),b(Da,Ha),b(Ha,Sa),b(Da,Ta),b(Da,Na),b(Na,Aa),b(Da,ya),b(Da,Fa),b(Fa,Ua),b(Da,ka),b(Da,Ka),b(Ka,La),b(Da,Ba),b(Da,Ja),b(Ja,Va),b(Da,_a),b(Da,Qa),b(Qa,Wa),b(Da,Xa),b(Da,Ya),b(Ya,Za),b(Da,$a),b(Da,eo),b(eo,ao),b(Da,oo),b(Da,ro),b(ro,so),b(Da,no),b(Da,to),b(to,io),b(Da,co),E(e,mo,c),E(e,uo,c),b(uo,lo),b(uo,ho),b(ho,po),E(e,fo,c),E(e,vo,c),b(vo,go),E(e,bo,c),E(e,Eo,c),b(Eo,qo),b(Eo,Oo),b(Oo,Do),b(Eo,Co),b(Eo,xo),b(xo,jo),b(Eo,zo),b(Eo,Go),b(Go,Ro),b(Eo,Io),b(Eo,wo),b(wo,Po),b(Eo,Mo),b(Eo,Ho),b(Ho,So),b(Eo,To),b(Eo,No),b(No,Ao),b(Eo,yo),E(e,Fo,c),E(e,Uo,c),b(Uo,ko),b(Uo,Ko),b(Ko,Lo),E(e,Bo,c),E(e,Jo,c),b(Jo,Vo),E(e,_o,c),E(e,Qo,c),b(Qo,Wo),b(Qo,Xo),b(Xo,Yo),b(Qo,Zo),b(Qo,$o),b($o,er),b(Qo,ar),b(Qo,or),b(or,rr),b(Qo,sr),b(Qo,nr),b(nr,tr),b(Qo,ir),b(Qo,cr),b(cr,dr),b(Qo,mr),b(Qo,ur),b(ur,lr),b(Qo,hr),b(Qo,pr),b(pr,fr),b(Qo,vr),E(e,gr,c),E(e,br,c),b(br,Er),b(br,qr),b(qr,Or),E(e,Dr,c),E(e,Cr,c),b(Cr,xr),E(e,jr,c),E(e,zr,c),b(zr,Gr),b(zr,Rr),b(Rr,Ir),b(zr,wr),b(zr,Pr),b(Pr,Mr),b(zr,Hr),b(zr,Sr),b(Sr,Tr),b(zr,Nr),b(zr,Ar),b(Ar,yr),b(zr,Fr),b(zr,Ur),b(Ur,kr),b(zr,Kr),E(e,Lr,c),E(e,Br,c),b(Br,Jr),E(e,Vr,c),E(e,_r,c),b(_r,Qr),b(_r,Wr),b(Wr,Xr),b(_r,Yr),b(_r,Zr),b(Zr,$r),b(_r,es),b(_r,as),b(as,os),b(_r,rs),b(_r,ss),b(ss,ns),b(_r,ts),b(_r,is),b(is,cs),b(_r,ds),E(e,ms,c),E(e,us,c),b(us,ls),E(e,hs,c),E(e,ps,c),b(ps,fs)},p:q,i:q,o:q,d:function(e){h(a),h(o),e&&h(r),e&&h(s),e&&h(i),e&&h(O),e&&h(C),e&&h(x),e&&h(z),e&&h(G),e&&h(y),e&&h(F),e&&h(U),e&&h(k),e&&h(L),e&&h(B),e&&h(W),e&&h(X),e&&h(de),e&&h(me),e&&h(pe),e&&h(fe),e&&h(ge),e&&h(be),e&&h(ke),e&&h(Ke),e&&h(Ve),e&&h(_e),e&&h(We),e&&h(Xe),e&&h(ha),e&&h(pa),e&&h(ba),e&&h(Ea),e&&h(Oa),e&&h(Da),e&&h(mo),e&&h(uo),e&&h(fo),e&&h(vo),e&&h(bo),e&&h(Eo),e&&h(Fo),e&&h(Uo),e&&h(Bo),e&&h(Jo),e&&h(_o),e&&h(Qo),e&&h(gr),e&&h(br),e&&h(Dr),e&&h(Cr),e&&h(jr),e&&h(zr),e&&h(Lr),e&&h(Br),e&&h(Vr),e&&h(_r),e&&h(ms),e&&h(us),e&&h(hs),e&&h(ps)}}}var C=function(a){e(c,t);var o=O(c);function c(e){var a;return r(this,c),a=o.call(this),s(n(a),e,null,D,i,{}),a}return c}();export default C;
