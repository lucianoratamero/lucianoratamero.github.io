import{_ as e,a,b as o,c as s,i as r,d as n,S as i,s as d,J as t,B as c,K as m,L as u,g as p,j as l,C as f,h as v,M as g,q as h,N as q,l as E,o as b}from"./client.b5ae4b81.js";import{c as x,i as R,a as S,b as P,d as G,e as O,f as z,g as I,h as w}from"./image8.948aeaf3.js";function A(e){var s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=a(e);if(s){var i=a(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return o(this,r)}}function N(e){var a,o,s,r,n,i,d,A,N,j,M,T,k,D,F,U,C,y,H,B,J,L,V,K,Q,_,W,X,Y,Z,$,ee,ae,oe,se,re,ne,ie,de,te,ce,me,ue,pe,le,fe,ve,ge,he,qe,Ee,be,xe,Re,Se,Pe,Ge,Oe,ze,Ie,we,Ae,Ne,je,Me,Te,ke,De,Fe,Ue,Ce,ye,He,Be,Je,Le,Ve,Ke,Qe,_e,We,Xe,Ye,Ze,$e,ea,aa,oa,sa,ra,na,ia,da,ta,ca,ma,ua,pa,la,fa,va,ga,ha,qa,Ea,ba,xa,Ra,Sa,Pa,Ga,Oa,za,Ia,wa,Aa,Na,ja,Ma,Ta,ka,Da,Fa,Ua,Ca,ya,Ha,Ba,Ja,La,Va,Ka,Qa,_a,Wa,Xa,Ya,Za,$a,eo,ao,oo,so,ro,no,io,to,co,mo,uo,po,lo,fo,vo,go,ho,qo,Eo,bo,xo,Ro,So,Po,Go,Oo,zo,Io,wo,Ao,No,jo,Mo,To,ko,Do,Fo,Uo,Co,yo,Ho,Bo,Jo,Lo,Vo,Ko;return{c:function(){a=t("meta"),o=t("meta"),s=c(),r=t("h1"),n=t("mark"),i=m("Desacoplando a lógica de componentes React"),d=c(),A=t("p"),N=m("2019-7-23"),j=c(),M=t("figure"),T=t("img"),D=c(),F=t("p"),U=t("em"),C=m("for native english speakers,\n    "),y=t("a"),H=m("here's the translated\n      post"),B=c(),J=t("p"),L=m("Sempre que há um novo projeto baseado em React, grande parte dos devs frontend\n  irão passar pelo ritual de configuração inicial. Padrões de implementação de\n  estilos, desacoplamento de componentes e estrutura de diretórios irão emergir\n  -\n  "),V=t("strong"),K=m("nem sempre pro bem"),Q=m(". O pior é que todo dev frontend que eu já\n  vi irá resolver o maior problema de todos, o problema de desacoplar lógica de\n  negócio, de uma forma diferente. Em um esforço para criar uma padronização e\n  resolver a questão da camada de domínio aqui na Labcodes, eu pesquisei um\n  bocado e achei uma forma boa e sustentável para lidar com requisições e\n  processamento de dados. O resultado: react-redux-api-tools."),_=c(),W=t("h2"),X=m("Vamos imaginar um cenário comum: CRUD"),Y=c(),Z=t("p"),$=m("Já que o javascript é muito permissivo, há inúmeras maneiras de implementarmos\n  um CRUD em uma SPA. Se limitarmos o escopo ao uso do react, as coisas ficam\n  mais fáceis, mas ainda há possíveis implementações demais. Uma delas é de usar\n  os hooks de ciclo de vida para fazer as requisições. Seu código provavelmente\n  irá ficar parecido com isso:"),ee=c(),ae=t("figure"),oe=t("img"),re=c(),ne=t("p"),ie=m("Eu acho que não preciso falar muito sobre isso, mas vou falar de qualquer\n  forma: essa implementação, mesmo sendo perfeitamente válida, tem alguns\n  "),de=t("strong"),te=m("grandes"),ce=m("\n  problemas."),me=c(),ue=t("p"),pe=m("1.A requisição está sendo feita dentro do componente que, em teoria, deveria\n  ter apenas um trabalho:\n  "),le=t("strong"),fe=m("renderizar os dados"),ve=m(". Se, por exemplo, você precisasse limpar\n  a sessão do usuário ou executar qualquer lógica de negócio, ela provavelmente\n  estaria aqui, o que é\n  "),ge=t("strong"),he=m("ainda pior"),qe=m(";"),Ee=t("br"),be=m("\n  2. Os dados da resposta da requisição está vivendo dentro do estado do\n  componente, e isso significa que tudo será perdido assim que o componente\n  desmontar;"),xe=t("br"),Re=m("\n  3. Você terá\n  "),Se=t("strong"),Pe=m("sempre"),Ge=m("\n  que pegar os dados da API para cada instância do componente, mesmo que já\n  tenha feito essa específica requisição um bilhão de vezes;"),Oe=t("br"),ze=m("\n  4. Não há nenhum estado intermediário entre o início da requisição e sua\n  resposta, então nada de spinners de loading (apesar de você poder implementar\n  essa lógica construindo um\n  "),Ie=t("em"),we=m("callback hell"),Ae=m("\n  de setStates);"),Ne=t("br"),je=m("\n  5. Já que componentes react são hierárquicos, se você precisar desses dados\n  dentro de um componente filho ou pai, você terá que implementar\n  contextos/props e callbacks.\n  "),Me=t("strong"),Te=m("O código fica complicado. RAPIDINHO."),ke=t("br"),De=c(),Fe=t("p"),Ue=m("Para melhorar esse código, muitos de nós preferem usar uma biblioteca para\n  prover um estado mais global para a aplicação; um estado que vive fora de\n  todos os componentes."),Ce=c(),ye=t("h2"),He=m("Segundo passo: usando Redux"),Be=c(),Je=t("p"),Le=m("Redux é uma das melhores bibliotecas para esse tipo de trabalho. Digamos que\n  você vai usar redux para lidar com dados e lógica de negócio. Assumindo que\n  você usará a camada de reducers para formatar dados e chamar lógicas de\n  domínio, seu componente vai ficar mais ou menos assim:"),Ve=c(),Ke=t("figure"),Qe=t("img"),We=c(),Xe=t("p"),Ye=m("Isso resolve grande parte dos problemas, mas eu diria que essa solução acopla\n  ainda mais o código e, certeza, deixa ele mais difícil de ler e manter. A\n  causa raiz disso tudo é o fato de que o componente está sendo responsável por\n  absolutamente tudo: pegar os dados da API e orquestrar eventos do redux,\n  quando era para ele estar… renderizando coisas. O fluxo ideal para resolver\n  todos os problemas, pelo menos os mais importantes, seria algo similar a isso:"),Ze=c(),$e=t("figure"),ea=t("img"),oa=c(),sa=t("p"),ra=m("Note que a única forma de completamente remover a lógica de negócio dos\n  componentes é acionando os casos de uso de ‘Sucesso’ e ‘Falha’\n  "),na=t("strong"),ia=m("fora do componente"),da=m(". Componentes devem renderizar coisas, não\n  lidar com gerenciamento de estado da\n  "),ta=t("strong"),ca=m("aplicação inteira"),ma=m(". Isso significa que o componente apenas\n  deve avisar a alguém que precisa de dados, disparando um evento (o evento de\n  ‘pega esses dados pra mim’), e então reagir aos dados quando eles estiverem\n  lá. Para respeitar essa ideia, nosso código do componente deveria ser tão\n  simples quanto isso:"),ua=c(),pa=t("figure"),la=t("img"),va=c(),ga=t("p"),ha=m("E isso significa que… as actions devem fazer a requisição dos dados? E\n  reducers iriam disparar outras ações? Soa estranho, né? Porque é. E não é o\n  que eu estou sugerindo\n  "),qa=t("strong"),Ea=m("mesmo"),ba=m("."),xa=c(),Ra=t("h2"),Sa=m("Eis que chegam os middlewares"),Pa=c(),Ga=t("p"),Oa=m("Para entregarmos o fluxo ideal de dados,\n  "),za=t("strong"),Ia=m("middlewares do redux são maravilhosos"),wa=m(". Imaginem que queremos\n  que nosso componente seja exatamente como o código que vimos acima. Se nós,\n  por exemplo, tivéssemos algo entre as actions e os reducers, a gente\n  conseguiria fazer com que esse\n  "),Aa=t("em"),Na=m("código do meio"),ja=c(),Ma=t("strong"),Ta=m("fizesse a requisição"),ka=m("\n  e, dependendo do resultado,\n  "),Da=t("strong"),Fa=m("decidisse quais reducers disparar"),Ua=m(". Assim, deixaríamos o redux\n  livre para fazer seu trabalho de gerenciar o estado da aplicação e lidar com\n  eventos, enquanto os componentes focariam em renderizar coisas -\n  "),Ca=t("strong"),ya=m("somente"),Ha=m("\n  renderizar coisas. Estou falando sobre algo como isso aqui:"),Ba=c(),Ja=t("figure"),La=t("img"),Ka=c(),Qa=t("p"),_a=m("Com esse fluxo proposto, nossas actions poderiam ser mais ou menos assim:"),Wa=c(),Xa=t("figure"),Ya=t("img"),$a=c(),eo=t("p"),ao=m("Ok, vamos com calma. O que você está vendo aí em cima é a nossa convenção\n  atual que descreve uma\n  "),oo=t("em"),so=m("action de requisição"),ro=m(", que usa o middleware incluído no nosso pacote\n  npm\n  "),no=t("code"),io=m("[react-redux-api-tools](https://www.npmjs.com/package/react-redux-api-tools)"),to=m(".\n  Fazer o dispatch dessa action\n  "),co=t("strong"),mo=m("configura"),uo=m("\n  o middleware para\n  "),po=t("strong"),lo=m("fazer a requisição"),fo=m("\n  (ao chamar a\n  "),vo=t("code"),go=m("apiCallFunction"),ho=m(") e para\n  "),qo=t("strong"),Eo=m("usar o reducer correto"),bo=m("\n  assim que a requisição estiver concluída. Enquanto isso, nossos componentes e\n  reducers se manteriam inalterados:"),xo=c(),Ro=t("figure"),So=t("img"),Go=c(),Oo=t("figure"),zo=t("img"),wo=c(),Ao=t("p"),No=m("E "),jo=t("em"),Mo=m("voilá,"),To=m(" nosso fluxo está bem mais limpo, simples e desacoplado!"),ko=c(),Do=t("h2"),Fo=m("Se você gostou disso ou isso parece mágico demais…"),Uo=c(),Co=t("p"),yo=m("Gostou na API desse middleware? Quer desenvolver seus projetos react-redux\n  dessa maneira? Está curiosa para saber como tudo isso funciona por baixo dos\n  panos? Então você é uma pessoa que poderia usar e contribuir com nosso pacote\n  npm\n  "),Ho=t("a"),Bo=m("react-redux-api-tools"),Jo=m(".\n  Reportagem de bugs e sugestões de features são bem vindas! E isso tudo é só o\n  começo;\n  "),Lo=t("a"),Vo=m("react-redux-api-tools"),Ko=m("\n  traz um monte de outras features que não consegui descrever nesse post. Dê uma\n  boa olhada na nossa documentação para descobrir como melhorar e simplificar\n  seu código usando nossas ferramentas! Obrigado, e até a próxima!"),this.h()},l:function(e){var t=u('[data-svelte="svelte-clatcc"]',document.head);a=p(t,"META",{name:!0,content:!0}),o=p(t,"META",{name:!0,content:!0}),t.forEach(l),s=f(e),r=p(e,"H1",{});var c=v(r);n=p(c,"MARK",{});var m=v(n);i=g(m,"Desacoplando a lógica de componentes React"),m.forEach(l),c.forEach(l),d=f(e),A=p(e,"P",{class:!0});var h=v(A);N=g(h,"2019-7-23"),h.forEach(l),j=f(e),M=p(e,"FIGURE",{});var q=v(M);T=p(q,"IMG",{src:!0,alt:!0}),q.forEach(l),D=f(e),F=p(e,"P",{});var E=v(F);U=p(E,"EM",{});var b=v(U);C=g(b,"for native english speakers,\n    "),y=p(b,"A",{href:!0});var x=v(y);H=g(x,"here's the translated\n      post"),x.forEach(l),b.forEach(l),E.forEach(l),B=f(e),J=p(e,"P",{});var R=v(J);L=g(R,"Sempre que há um novo projeto baseado em React, grande parte dos devs frontend\n  irão passar pelo ritual de configuração inicial. Padrões de implementação de\n  estilos, desacoplamento de componentes e estrutura de diretórios irão emergir\n  -\n  "),V=p(R,"STRONG",{});var S=v(V);K=g(S,"nem sempre pro bem"),S.forEach(l),Q=g(R,". O pior é que todo dev frontend que eu já\n  vi irá resolver o maior problema de todos, o problema de desacoplar lógica de\n  negócio, de uma forma diferente. Em um esforço para criar uma padronização e\n  resolver a questão da camada de domínio aqui na Labcodes, eu pesquisei um\n  bocado e achei uma forma boa e sustentável para lidar com requisições e\n  processamento de dados. O resultado: react-redux-api-tools."),R.forEach(l),_=f(e),W=p(e,"H2",{});var P=v(W);X=g(P,"Vamos imaginar um cenário comum: CRUD"),P.forEach(l),Y=f(e),Z=p(e,"P",{});var G=v(Z);$=g(G,"Já que o javascript é muito permissivo, há inúmeras maneiras de implementarmos\n  um CRUD em uma SPA. Se limitarmos o escopo ao uso do react, as coisas ficam\n  mais fáceis, mas ainda há possíveis implementações demais. Uma delas é de usar\n  os hooks de ciclo de vida para fazer as requisições. Seu código provavelmente\n  irá ficar parecido com isso:"),G.forEach(l),ee=f(e),ae=p(e,"FIGURE",{});var O=v(ae);oe=p(O,"IMG",{alt:!0,src:!0}),O.forEach(l),re=f(e),ne=p(e,"P",{});var z=v(ne);ie=g(z,"Eu acho que não preciso falar muito sobre isso, mas vou falar de qualquer\n  forma: essa implementação, mesmo sendo perfeitamente válida, tem alguns\n  "),de=p(z,"STRONG",{});var I=v(de);te=g(I,"grandes"),I.forEach(l),ce=g(z,"\n  problemas."),z.forEach(l),me=f(e),ue=p(e,"P",{});var w=v(ue);pe=g(w,"1.A requisição está sendo feita dentro do componente que, em teoria, deveria\n  ter apenas um trabalho:\n  "),le=p(w,"STRONG",{});var k=v(le);fe=g(k,"renderizar os dados"),k.forEach(l),ve=g(w,". Se, por exemplo, você precisasse limpar\n  a sessão do usuário ou executar qualquer lógica de negócio, ela provavelmente\n  estaria aqui, o que é\n  "),ge=p(w,"STRONG",{});var se=v(ge);he=g(se,"ainda pior"),se.forEach(l),qe=g(w,";"),Ee=p(w,"BR",{}),be=g(w,"\n  2. Os dados da resposta da requisição está vivendo dentro do estado do\n  componente, e isso significa que tudo será perdido assim que o componente\n  desmontar;"),xe=p(w,"BR",{}),Re=g(w,"\n  3. Você terá\n  "),Se=p(w,"STRONG",{});var _e=v(Se);Pe=g(_e,"sempre"),_e.forEach(l),Ge=g(w,"\n  que pegar os dados da API para cada instância do componente, mesmo que já\n  tenha feito essa específica requisição um bilhão de vezes;"),Oe=p(w,"BR",{}),ze=g(w,"\n  4. Não há nenhum estado intermediário entre o início da requisição e sua\n  resposta, então nada de spinners de loading (apesar de você poder implementar\n  essa lógica construindo um\n  "),Ie=p(w,"EM",{});var aa=v(Ie);we=g(aa,"callback hell"),aa.forEach(l),Ae=g(w,"\n  de setStates);"),Ne=p(w,"BR",{}),je=g(w,"\n  5. Já que componentes react são hierárquicos, se você precisar desses dados\n  dentro de um componente filho ou pai, você terá que implementar\n  contextos/props e callbacks.\n  "),Me=p(w,"STRONG",{});var fa=v(Me);Te=g(fa,"O código fica complicado. RAPIDINHO."),fa.forEach(l),ke=p(w,"BR",{}),w.forEach(l),De=f(e),Fe=p(e,"P",{});var Va=v(Fe);Ue=g(Va,"Para melhorar esse código, muitos de nós preferem usar uma biblioteca para\n  prover um estado mais global para a aplicação; um estado que vive fora de\n  todos os componentes."),Va.forEach(l),Ce=f(e),ye=p(e,"H2",{});var Za=v(ye);He=g(Za,"Segundo passo: usando Redux"),Za.forEach(l),Be=f(e),Je=p(e,"P",{});var Po=v(Je);Le=g(Po,"Redux é uma das melhores bibliotecas para esse tipo de trabalho. Digamos que\n  você vai usar redux para lidar com dados e lógica de negócio. Assumindo que\n  você usará a camada de reducers para formatar dados e chamar lógicas de\n  domínio, seu componente vai ficar mais ou menos assim:"),Po.forEach(l),Ve=f(e),Ke=p(e,"FIGURE",{});var Io=v(Ke);Qe=p(Io,"IMG",{alt:!0,src:!0}),Io.forEach(l),We=f(e),Xe=p(e,"P",{});var Qo=v(Xe);Ye=g(Qo,"Isso resolve grande parte dos problemas, mas eu diria que essa solução acopla\n  ainda mais o código e, certeza, deixa ele mais difícil de ler e manter. A\n  causa raiz disso tudo é o fato de que o componente está sendo responsável por\n  absolutamente tudo: pegar os dados da API e orquestrar eventos do redux,\n  quando era para ele estar… renderizando coisas. O fluxo ideal para resolver\n  todos os problemas, pelo menos os mais importantes, seria algo similar a isso:"),Qo.forEach(l),Ze=f(e),$e=p(e,"FIGURE",{});var _o=v($e);ea=p(_o,"IMG",{alt:!0,src:!0}),_o.forEach(l),oa=f(e),sa=p(e,"P",{});var Wo=v(sa);ra=g(Wo,"Note que a única forma de completamente remover a lógica de negócio dos\n  componentes é acionando os casos de uso de ‘Sucesso’ e ‘Falha’\n  "),na=p(Wo,"STRONG",{});var Xo=v(na);ia=g(Xo,"fora do componente"),Xo.forEach(l),da=g(Wo,". Componentes devem renderizar coisas, não\n  lidar com gerenciamento de estado da\n  "),ta=p(Wo,"STRONG",{});var Yo=v(ta);ca=g(Yo,"aplicação inteira"),Yo.forEach(l),ma=g(Wo,". Isso significa que o componente apenas\n  deve avisar a alguém que precisa de dados, disparando um evento (o evento de\n  ‘pega esses dados pra mim’), e então reagir aos dados quando eles estiverem\n  lá. Para respeitar essa ideia, nosso código do componente deveria ser tão\n  simples quanto isso:"),Wo.forEach(l),ua=f(e),pa=p(e,"FIGURE",{});var Zo=v(pa);la=p(Zo,"IMG",{alt:!0,src:!0}),Zo.forEach(l),va=f(e),ga=p(e,"P",{});var $o=v(ga);ha=g($o,"E isso significa que… as actions devem fazer a requisição dos dados? E\n  reducers iriam disparar outras ações? Soa estranho, né? Porque é. E não é o\n  que eu estou sugerindo\n  "),qa=p($o,"STRONG",{});var es=v(qa);Ea=g(es,"mesmo"),es.forEach(l),ba=g($o,"."),$o.forEach(l),xa=f(e),Ra=p(e,"H2",{});var as=v(Ra);Sa=g(as,"Eis que chegam os middlewares"),as.forEach(l),Pa=f(e),Ga=p(e,"P",{});var os=v(Ga);Oa=g(os,"Para entregarmos o fluxo ideal de dados,\n  "),za=p(os,"STRONG",{});var ss=v(za);Ia=g(ss,"middlewares do redux são maravilhosos"),ss.forEach(l),wa=g(os,". Imaginem que queremos\n  que nosso componente seja exatamente como o código que vimos acima. Se nós,\n  por exemplo, tivéssemos algo entre as actions e os reducers, a gente\n  conseguiria fazer com que esse\n  "),Aa=p(os,"EM",{});var rs=v(Aa);Na=g(rs,"código do meio"),rs.forEach(l),ja=f(os),Ma=p(os,"STRONG",{});var ns=v(Ma);Ta=g(ns,"fizesse a requisição"),ns.forEach(l),ka=g(os,"\n  e, dependendo do resultado,\n  "),Da=p(os,"STRONG",{});var is=v(Da);Fa=g(is,"decidisse quais reducers disparar"),is.forEach(l),Ua=g(os,". Assim, deixaríamos o redux\n  livre para fazer seu trabalho de gerenciar o estado da aplicação e lidar com\n  eventos, enquanto os componentes focariam em renderizar coisas -\n  "),Ca=p(os,"STRONG",{});var ds=v(Ca);ya=g(ds,"somente"),ds.forEach(l),Ha=g(os,"\n  renderizar coisas. Estou falando sobre algo como isso aqui:"),os.forEach(l),Ba=f(e),Ja=p(e,"FIGURE",{});var ts=v(Ja);La=p(ts,"IMG",{alt:!0,src:!0}),ts.forEach(l),Ka=f(e),Qa=p(e,"P",{});var cs=v(Qa);_a=g(cs,"Com esse fluxo proposto, nossas actions poderiam ser mais ou menos assim:"),cs.forEach(l),Wa=f(e),Xa=p(e,"FIGURE",{});var ms=v(Xa);Ya=p(ms,"IMG",{alt:!0,src:!0}),ms.forEach(l),$a=f(e),eo=p(e,"P",{});var us=v(eo);ao=g(us,"Ok, vamos com calma. O que você está vendo aí em cima é a nossa convenção\n  atual que descreve uma\n  "),oo=p(us,"EM",{});var ps=v(oo);so=g(ps,"action de requisição"),ps.forEach(l),ro=g(us,", que usa o middleware incluído no nosso pacote\n  npm\n  "),no=p(us,"CODE",{});var ls=v(no);io=g(ls,"[react-redux-api-tools](https://www.npmjs.com/package/react-redux-api-tools)"),ls.forEach(l),to=g(us,".\n  Fazer o dispatch dessa action\n  "),co=p(us,"STRONG",{});var fs=v(co);mo=g(fs,"configura"),fs.forEach(l),uo=g(us,"\n  o middleware para\n  "),po=p(us,"STRONG",{});var vs=v(po);lo=g(vs,"fazer a requisição"),vs.forEach(l),fo=g(us,"\n  (ao chamar a\n  "),vo=p(us,"CODE",{});var gs=v(vo);go=g(gs,"apiCallFunction"),gs.forEach(l),ho=g(us,") e para\n  "),qo=p(us,"STRONG",{});var hs=v(qo);Eo=g(hs,"usar o reducer correto"),hs.forEach(l),bo=g(us,"\n  assim que a requisição estiver concluída. Enquanto isso, nossos componentes e\n  reducers se manteriam inalterados:"),us.forEach(l),xo=f(e),Ro=p(e,"FIGURE",{});var qs=v(Ro);So=p(qs,"IMG",{alt:!0,src:!0}),qs.forEach(l),Go=f(e),Oo=p(e,"FIGURE",{});var Es=v(Oo);zo=p(Es,"IMG",{alt:!0,src:!0}),Es.forEach(l),wo=f(e),Ao=p(e,"P",{});var bs=v(Ao);No=g(bs,"E "),jo=p(bs,"EM",{});var xs=v(jo);Mo=g(xs,"voilá,"),xs.forEach(l),To=g(bs," nosso fluxo está bem mais limpo, simples e desacoplado!"),bs.forEach(l),ko=f(e),Do=p(e,"H2",{});var Rs=v(Do);Fo=g(Rs,"Se você gostou disso ou isso parece mágico demais…"),Rs.forEach(l),Uo=f(e),Co=p(e,"P",{});var Ss=v(Co);yo=g(Ss,"Gostou na API desse middleware? Quer desenvolver seus projetos react-redux\n  dessa maneira? Está curiosa para saber como tudo isso funciona por baixo dos\n  panos? Então você é uma pessoa que poderia usar e contribuir com nosso pacote\n  npm\n  "),Ho=p(Ss,"A",{href:!0});var Ps=v(Ho);Bo=g(Ps,"react-redux-api-tools"),Ps.forEach(l),Jo=g(Ss,".\n  Reportagem de bugs e sugestões de features são bem vindas! E isso tudo é só o\n  começo;\n  "),Lo=p(Ss,"A",{href:!0});var Gs=v(Lo);Vo=g(Gs,"react-redux-api-tools"),Gs.forEach(l),Ko=g(Ss,"\n  traz um monte de outras features que não consegui descrever nesse post. Dê uma\n  boa olhada na nossa documentação para descobrir como melhorar e simplificar\n  seu código usando nossas ferramentas! Obrigado, e até a próxima!"),Ss.forEach(l),this.h()},h:function(){document.title="\n    Desacoplando a lógica de componentes React - luciano@ratamero.com\n  ",h(a,"name","description"),h(a,"content","Nesse post, discutiremos como separar as lógicas de renderização e de domínio usando React e Redux :]"),h(o,"name","keywords"),h(o,"content","Luciano Ratamero, react, redux, grandes projetos, arquitetura, planejamento, frontend, javascript, frameworks"),h(A,"class","meta"),T.src!==(k=x)&&h(T,"src",k),h(T,"alt","Ilustração com as logos do React e do Redux"),h(y,"href","/en/decoupling-logic-from-react-components/"),h(oe,"alt","primeiro código"),oe.src!==(se=R)&&h(oe,"src",se),h(Qe,"alt","segundo código"),Qe.src!==(_e=S)&&h(Qe,"src",_e),h(ea,"alt","primeiro processo"),ea.src!==(aa=P)&&h(ea,"src",aa),h(la,"alt","terceiro codigo"),la.src!==(fa=G)&&h(la,"src",fa),h(La,"alt","segundo processo"),La.src!==(Va=O)&&h(La,"src",Va),h(Ya,"alt","quarto codigo"),Ya.src!==(Za=z)&&h(Ya,"src",Za),h(So,"alt","quinto codigo"),So.src!==(Po=I)&&h(So,"src",Po),h(zo,"alt","sexto codigo"),zo.src!==(Io=w)&&h(zo,"src",Io),h(Ho,"href","https://www.npmjs.com/package/react-redux-api-tools"),h(Lo,"href","https://www.npmjs.com/package/react-redux-api-tools")},m:function(e,t){q(document.head,a),q(document.head,o),E(e,s,t),E(e,r,t),q(r,n),q(n,i),E(e,d,t),E(e,A,t),q(A,N),E(e,j,t),E(e,M,t),q(M,T),E(e,D,t),E(e,F,t),q(F,U),q(U,C),q(U,y),q(y,H),E(e,B,t),E(e,J,t),q(J,L),q(J,V),q(V,K),q(J,Q),E(e,_,t),E(e,W,t),q(W,X),E(e,Y,t),E(e,Z,t),q(Z,$),E(e,ee,t),E(e,ae,t),q(ae,oe),E(e,re,t),E(e,ne,t),q(ne,ie),q(ne,de),q(de,te),q(ne,ce),E(e,me,t),E(e,ue,t),q(ue,pe),q(ue,le),q(le,fe),q(ue,ve),q(ue,ge),q(ge,he),q(ue,qe),q(ue,Ee),q(ue,be),q(ue,xe),q(ue,Re),q(ue,Se),q(Se,Pe),q(ue,Ge),q(ue,Oe),q(ue,ze),q(ue,Ie),q(Ie,we),q(ue,Ae),q(ue,Ne),q(ue,je),q(ue,Me),q(Me,Te),q(ue,ke),E(e,De,t),E(e,Fe,t),q(Fe,Ue),E(e,Ce,t),E(e,ye,t),q(ye,He),E(e,Be,t),E(e,Je,t),q(Je,Le),E(e,Ve,t),E(e,Ke,t),q(Ke,Qe),E(e,We,t),E(e,Xe,t),q(Xe,Ye),E(e,Ze,t),E(e,$e,t),q($e,ea),E(e,oa,t),E(e,sa,t),q(sa,ra),q(sa,na),q(na,ia),q(sa,da),q(sa,ta),q(ta,ca),q(sa,ma),E(e,ua,t),E(e,pa,t),q(pa,la),E(e,va,t),E(e,ga,t),q(ga,ha),q(ga,qa),q(qa,Ea),q(ga,ba),E(e,xa,t),E(e,Ra,t),q(Ra,Sa),E(e,Pa,t),E(e,Ga,t),q(Ga,Oa),q(Ga,za),q(za,Ia),q(Ga,wa),q(Ga,Aa),q(Aa,Na),q(Ga,ja),q(Ga,Ma),q(Ma,Ta),q(Ga,ka),q(Ga,Da),q(Da,Fa),q(Ga,Ua),q(Ga,Ca),q(Ca,ya),q(Ga,Ha),E(e,Ba,t),E(e,Ja,t),q(Ja,La),E(e,Ka,t),E(e,Qa,t),q(Qa,_a),E(e,Wa,t),E(e,Xa,t),q(Xa,Ya),E(e,$a,t),E(e,eo,t),q(eo,ao),q(eo,oo),q(oo,so),q(eo,ro),q(eo,no),q(no,io),q(eo,to),q(eo,co),q(co,mo),q(eo,uo),q(eo,po),q(po,lo),q(eo,fo),q(eo,vo),q(vo,go),q(eo,ho),q(eo,qo),q(qo,Eo),q(eo,bo),E(e,xo,t),E(e,Ro,t),q(Ro,So),E(e,Go,t),E(e,Oo,t),q(Oo,zo),E(e,wo,t),E(e,Ao,t),q(Ao,No),q(Ao,jo),q(jo,Mo),q(Ao,To),E(e,ko,t),E(e,Do,t),q(Do,Fo),E(e,Uo,t),E(e,Co,t),q(Co,yo),q(Co,Ho),q(Ho,Bo),q(Co,Jo),q(Co,Lo),q(Lo,Vo),q(Co,Ko)},p:b,i:b,o:b,d:function(e){l(a),l(o),e&&l(s),e&&l(r),e&&l(d),e&&l(A),e&&l(j),e&&l(M),e&&l(D),e&&l(F),e&&l(B),e&&l(J),e&&l(_),e&&l(W),e&&l(Y),e&&l(Z),e&&l(ee),e&&l(ae),e&&l(re),e&&l(ne),e&&l(me),e&&l(ue),e&&l(De),e&&l(Fe),e&&l(Ce),e&&l(ye),e&&l(Be),e&&l(Je),e&&l(Ve),e&&l(Ke),e&&l(We),e&&l(Xe),e&&l(Ze),e&&l($e),e&&l(oa),e&&l(sa),e&&l(ua),e&&l(pa),e&&l(va),e&&l(ga),e&&l(xa),e&&l(Ra),e&&l(Pa),e&&l(Ga),e&&l(Ba),e&&l(Ja),e&&l(Ka),e&&l(Qa),e&&l(Wa),e&&l(Xa),e&&l($a),e&&l(eo),e&&l(xo),e&&l(Ro),e&&l(Go),e&&l(Oo),e&&l(wo),e&&l(Ao),e&&l(ko),e&&l(Do),e&&l(Uo),e&&l(Co)}}}var j=function(a){e(t,i);var o=A(t);function t(e){var a;return s(this,t),a=o.call(this),r(n(a),e,null,N,d,{}),a}return t}();export default j;
