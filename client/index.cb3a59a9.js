import{S as e,i as a,s as o,M as s,c as r,a as n,e as i,t as d,q as t,j as c,d as u,f as m,b as p,g as l,h as f,k as g,n as v,m as h,l as q,p as E,r as x,u as b,H as R}from"./client.311a5b93.js";import"./Icon.06acf308.js";import{M as $,P}from"./MetaTags.39c5eacd.js";import{H as S,j as C}from"./index.ec9d7c60.js";import{c as z}from"./cover.e41aed43.js";function I(e){let a,o,R,I,O,L,w,T,D,A,j,N,G,U,k,M,F,H,_,y,B,J,Q,V,K,W,X,Y,Z,ee,ae,oe,se,re,ne,ie,de,te,ce,ue,me,pe,le,fe,ge,ve,he,qe,Ee,xe,be,Re,$e,Pe,Se,Ce,ze,Ie,Oe,Le,we,Te,De,Ae,je,Ne,Ge,Ue,ke,Me,Fe,He,_e,ye,Be,Je,Qe,Ve,Ke,We,Xe,Ye,Ze,ea,aa,oa,sa,ra,na,ia,da,ta,ca,ua,ma,pa,la,fa,ga,va,ha,qa,Ea,xa,ba,Ra,$a,Pa,Sa,Ca,za,Ia,Oa,La,wa,Ta,Da,Aa,ja,Na,Ga,Ua,ka,Ma,Fa,Ha,_a,ya,Ba,Ja,Qa,Va,Ka,Wa,Xa,Ya,Za,eo,ao,oo,so,ro,no,io,to,co,uo,mo,po,lo,fo,go,vo,ho,qo,Eo,xo,bo,Ro,$o,Po,So,Co,zo,Io,Oo,Lo,wo,To,Do,Ao,jo,No,Go,Uo,ko,Mo,Fo,Ho,_o,yo,Bo,Jo,Qo,Vo,Ko,Wo,Xo,Yo,Zo,es,as,os,ss,rs,ns,is,ds,ts,cs,us,ms,ps,ls,fs,gs;return a=new $({props:{title:"Desacoplando a lógica de componentes React",description:"Nesse post, discutiremos como separar as lógicas de renderização e de domínio usando React e Redux :]",keywords:"react, redux, grandes projetos, arquitetura, planejamento, frontend, javascript, frameworks"}}),w=new P({props:{date:"2019-07-23",text:e[1]}}),oe=new S({props:{language:C,code:s('\nexport default class Product extends React.Component {\n  // ...\n  componentDidMount() {\n    fetch("/api/products/1/")\n      .then(response => response.json())\n      .then(data => this.setState({...data}));\n  }\n  //...\n}\n')}}),Be=new S({props:{language:C,code:s('\nexport default class Product extends React.Component {\n  // ...\n  componentDidMount() {\n    const { fetchProductIsLoading, setProductData } = this.props;\n    // liga o spinner de loading via redux\n    fetchProductIsLoading();\n\n    // faz a requisição e coloca os dados na store do redux\n    fetch("/api/products/1/")\n      .then(response => response.json())\n      .then(data => setProductData(data));\n  }\n  //...\n  render() {\n    const { productIsLoading, productData } = this.props;\n    // ...\n  }\n}\n')}}),ba=new S({props:{language:C,code:s("\nexport default class Product extends React.Component {\n  // ...\n  componentDidMount() {\n    const { fetchProduct } = this.props;\n    fetchProduct();\n  }\n  //...\n  render() {\n    const { productIsLoading, productData } = this.props;\n    // ...\n  }\n}\n")}}),Po=new S({props:{language:C,code:s("\nexport function fetchProduct(id) {\n  return {\n    types: {\n      request: FETCH_PRODUCT_REQUEST,\n      success: FETCH_PRODUCT_SUCCESS,\n      failure: FETCH_PRODUCT_FAILURE,\n    },\n    apiCallFunction: () => fetch(`/api/products/${id}`),\n  }\n}\n")}}),Vo=new S({props:{language:C,code:s("\nexport default class Product extends React.Component {\n  // ...\n  componentDidMount() {\n    const { fetchProduct } = this.props;\n    fetchProduct();\n  }\n  //...\n  render() {\n    const { productIsLoading, productData } = this.props;\n    // ...\n  }\n}\n")}}),Wo=new S({props:{language:C,code:s("\nexport const productReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case FETCH_PRODUCT_REQUEST:\n      return {\n        ...state,\n        error: null,\n        productIsLoading: true,\n      }\n    case FETCH_PRODUCT_SUCCESS:\n      // aqui, você pode executar qualquer lógica de negócio\n      businessLogic();\n\n      return {\n        ...state,\n        error: null,\n        productIsLoading: initialState.productIsLoading,\n        productData: action.response.data,\n      }\n    case FETCH_PRODUCT_FAILURE:\n      return {\n        ...state,\n        productIsLoading: initialState.productIsLoading,\n        error: action.response.data,\n      }\n    default:\n      return state;\n  }\n}\n")}}),{c(){r(a.$$.fragment),o=n(),R=i("h1"),I=i("mark"),O=d("Desacoplando a lógica de componentes React"),L=n(),r(w.$$.fragment),T=n(),D=i("figure"),A=i("img"),N=n(),G=i("p"),U=i("em"),k=d("for native english speakers,\n    "),M=i("a"),F=d("here's the translated\n      post"),H=n(),_=i("article"),y=i("p"),B=d("Sempre que há um novo projeto baseado em React, grande parte dos devs\n    frontend irão passar pelo ritual de configuração inicial. Padrões de\n    implementação de estilos, desacoplamento de componentes e estrutura de\n    diretórios irão emergir -\n    "),J=i("strong"),Q=d("nem sempre pro bem"),V=d(". O pior é que todo dev frontend que eu\n    já vi irá resolver o maior problema de todos, o problema de desacoplar\n    lógica de negócio, de uma forma diferente. Em um esforço para criar uma\n    padronização e resolver a questão da camada de domínio aqui na Labcodes, eu\n    pesquisei um bocado e achei uma forma boa e sustentável para lidar com\n    requisições e processamento de dados. O resultado: react-redux-api-tools."),K=n(),W=i("h2"),X=d("Vamos imaginar um cenário comum: CRUD"),Y=n(),Z=i("p"),ee=d("Já que o javascript é muito permissivo, há inúmeras maneiras de\n    implementarmos um CRUD em uma SPA. Se limitarmos o escopo ao uso do react,\n    as coisas ficam mais fáceis, mas ainda há possíveis implementações demais.\n    Uma delas é de usar os hooks de ciclo de vida para fazer as requisições. Seu\n    código provavelmente irá ficar parecido com isso:"),ae=n(),r(oe.$$.fragment),se=n(),re=i("p"),ne=d("Eu acho que não preciso falar muito sobre isso, mas vou falar de qualquer\n    forma: essa implementação, mesmo sendo perfeitamente válida, tem alguns\n    "),ie=i("strong"),de=d("grandes"),te=d("\n    problemas."),ce=n(),ue=i("p"),me=d("1.A requisição está sendo feita dentro do componente que, em teoria, deveria\n    ter apenas um trabalho:\n    "),pe=i("strong"),le=d("renderizar os dados"),fe=d(". Se, por exemplo, você precisasse\n    limpar a sessão do usuário ou executar qualquer lógica de negócio, ela\n    provavelmente estaria aqui, o que é\n    "),ge=i("strong"),ve=d("ainda pior"),he=d(";"),qe=i("br"),Ee=d("\n    2. Os dados da resposta da requisição está vivendo dentro do estado do\n    componente, e isso significa que tudo será perdido assim que o componente\n    desmontar;"),xe=i("br"),be=d("\n    3. Você terá\n    "),Re=i("strong"),$e=d("sempre"),Pe=d("\n    que pegar os dados da API para cada instância do componente, mesmo que já\n    tenha feito essa específica requisição um bilhão de vezes;"),Se=i("br"),Ce=d("\n    4. Não há nenhum estado intermediário entre o início da requisição e sua\n    resposta, então nada de spinners de loading (apesar de você poder\n    implementar essa lógica construindo um\n    "),ze=i("em"),Ie=d("callback hell"),Oe=d("\n    de setStates);"),Le=i("br"),we=d("\n    5. Já que componentes react são hierárquicos, se você precisar desses dados\n    dentro de um componente filho ou pai, você terá que implementar\n    contextos/props e callbacks.\n    "),Te=i("strong"),De=d("O código fica complicado. RAPIDINHO."),Ae=i("br"),je=n(),Ne=i("p"),Ge=d("Para melhorar esse código, muitos de nós preferem usar uma biblioteca para\n    prover um estado mais global para a aplicação; um estado que vive fora de\n    todos os componentes."),Ue=n(),ke=i("h2"),Me=d("Segundo passo: usando Redux"),Fe=n(),He=i("p"),_e=d("Redux é uma das melhores bibliotecas para esse tipo de trabalho. Digamos que\n    você vai usar redux para lidar com dados e lógica de negócio. Assumindo que\n    você usará a camada de reducers para formatar dados e chamar lógicas de\n    domínio, seu componente vai ficar mais ou menos assim:"),ye=n(),r(Be.$$.fragment),Je=n(),Qe=i("p"),Ve=d("Isso resolve grande parte dos problemas, mas eu diria que essa solução\n    acopla ainda mais o código e, certeza, deixa ele mais difícil de ler e\n    manter. A causa raiz disso tudo é o fato de que o componente está sendo\n    responsável por absolutamente tudo: pegar os dados da API e orquestrar\n    eventos do redux, quando era para ele estar… renderizando coisas. O fluxo\n    ideal para resolver todos os problemas, pelo menos os mais importantes,\n    seria algo similar a isso:"),Ke=n(),We=i("ul"),Xe=i("li"),Ye=d("Componente monta e levanta sinal de isLoading pro Redux"),Ze=n(),ea=i("li"),aa=d("Action do Redux começa a requisição e dispara reducer de isLoading"),oa=n(),sa=i("li"),ra=d("Componente renderiza isLoading"),na=n(),ia=i("li"),da=d("Requisição termina assincronamente e dispara reducer de sucesso ou falha"),ta=n(),ca=i("li"),ua=d("Componente renderiza sucesso ou falha"),ma=n(),pa=i("p"),la=d("Note que a única forma de completamente remover a lógica de negócio dos\n    componentes é acionando os casos de uso de ‘Sucesso’ e ‘Falha’\n    "),fa=i("strong"),ga=d("fora do componente"),va=d(". Componentes devem renderizar coisas,\n    não lidar com gerenciamento de estado da\n    "),ha=i("strong"),qa=d("aplicação inteira"),Ea=d(". Isso significa que o componente apenas\n    deve avisar a alguém que precisa de dados, disparando um evento (o evento de\n    ‘pega esses dados pra mim’), e então reagir aos dados quando eles estiverem\n    lá. Para respeitar essa ideia, nosso código do componente deveria ser tão\n    simples quanto isso:"),xa=n(),r(ba.$$.fragment),Ra=n(),$a=i("p"),Pa=d("E isso significa que… as actions devem fazer a requisição dos dados? E\n    reducers iriam disparar outras ações? Soa estranho, né? Porque é. E não é o\n    que eu estou sugerindo\n    "),Sa=i("strong"),Ca=d("mesmo"),za=d("."),Ia=n(),Oa=i("h2"),La=d("Eis que chegam os middlewares"),wa=n(),Ta=i("p"),Da=d("Para entregarmos o fluxo ideal de dados,\n    "),Aa=i("strong"),ja=d("middlewares do redux são maravilhosos"),Na=d(". Imaginem que\n    queremos que nosso componente seja exatamente como o código que vimos acima.\n    Se nós, por exemplo, tivéssemos algo entre as actions e os reducers, a gente\n    conseguiria fazer com que esse\n    "),Ga=i("em"),Ua=d("código do meio"),ka=n(),Ma=i("strong"),Fa=d("fizesse a requisição"),Ha=d("\n    e, dependendo do resultado,\n    "),_a=i("strong"),ya=d("decidisse quais reducers disparar"),Ba=d(". Assim, deixaríamos o\n    redux livre para fazer seu trabalho de gerenciar o estado da aplicação e\n    lidar com eventos, enquanto os componentes focariam em renderizar coisas -\n    "),Ja=i("strong"),Qa=d("somente"),Va=d("\n    renderizar coisas. Estou falando sobre algo como isso aqui:"),Ka=n(),Wa=i("ul"),Xa=i("li"),Ya=d("Componente monta e levanta sinal de iniciar a requisição pro Redux"),Za=n(),eo=i("li"),ao=d("Action do Redux descreve reducers de sucesso e falha e declara função que\n      faz a requisição"),oo=n(),so=i("li"),ro=i("strong"),no=d("Middleware chama a função da requisição, guarda a promise e\n        dispara reducer de isLoading"),io=n(),to=i("li"),co=d("Componente renderiza isLoading"),uo=n(),mo=i("li"),po=i("strong"),lo=d("Middleware escuta a requisição e chama reducer de sucesso ou falha\n        baseado na descrição da action"),fo=n(),go=i("li"),vo=d("Reducer de sucesso ou falha executa código de lógica de negócio e persiste\n      dados na store"),ho=n(),qo=i("li"),Eo=d("Componente renderiza sucesso ou falha"),xo=n(),bo=i("p"),Ro=d("Com esse fluxo proposto, nossas actions poderiam ser mais ou menos assim:"),$o=n(),r(Po.$$.fragment),So=n(),Co=i("p"),zo=d("Ok, vamos com calma. O que você está vendo aí em cima é a nossa convenção\n    atual que descreve uma\n    "),Io=i("em"),Oo=d("action de requisição"),Lo=d(", que usa o middleware incluído no nosso pacote\n    npm\n    "),wo=i("a"),To=i("code"),Do=d("react-redux-api-tools"),Ao=d(". Fazer o dispatch\n    dessa action\n    "),jo=i("strong"),No=d("configura"),Go=d("\n    o middleware para\n    "),Uo=i("strong"),ko=d("fazer a requisição"),Mo=d("\n    (ao chamar a\n    "),Fo=i("code"),Ho=d("apiCallFunction"),_o=d(") e para\n    "),yo=i("strong"),Bo=d("usar o reducer correto"),Jo=d("\n    assim que a requisição estiver concluída. Enquanto isso, nossos componentes\n    e reducers se manteriam inalterados:"),Qo=n(),r(Vo.$$.fragment),Ko=n(),r(Wo.$$.fragment),Xo=n(),Yo=i("p"),Zo=d("E\n    "),es=i("em"),as=d("voilá,"),os=d("\n    nosso fluxo está bem mais limpo, simples e desacoplado!"),ss=n(),rs=i("h2"),ns=d("Se você gostou disso ou isso parece mágico demais…"),is=n(),ds=i("p"),ts=d("Gostou na API desse middleware? Quer desenvolver seus projetos react-redux\n    dessa maneira? Está curiosa para saber como tudo isso funciona por baixo dos\n    panos? Então você é uma pessoa que poderia usar e contribuir com nosso\n    pacote npm\n    "),cs=i("a"),us=d("react-redux-api-tools"),ms=d(".\n    Reportagem de bugs e sugestões de features são bem vindas! E isso tudo é só\n    o começo;\n    "),ps=i("a"),ls=d("react-redux-api-tools"),fs=d("\n    traz um monte de outras features que não consegui descrever nesse post. Dê\n    uma boa olhada na nossa documentação para descobrir como melhorar e\n    simplificar seu código usando nossas ferramentas! Obrigado, e até a próxima!"),this.h()},l(e){const s=t('[data-svelte="svelte-e26my1"]',document.head);c(a.$$.fragment,s),s.forEach(u),o=m(e),R=p(e,"H1",{});var r=l(R);I=p(r,"MARK",{});var n=l(I);O=f(n,"Desacoplando a lógica de componentes React"),n.forEach(u),r.forEach(u),L=m(e),c(w.$$.fragment,e),T=m(e),D=p(e,"FIGURE",{});var i=l(D);A=p(i,"IMG",{src:!0,alt:!0}),i.forEach(u),N=m(e),G=p(e,"P",{});var d=l(G);U=p(d,"EM",{});var g=l(U);k=f(g,"for native english speakers,\n    "),M=p(g,"A",{href:!0});var v=l(M);F=f(v,"here's the translated\n      post"),v.forEach(u),g.forEach(u),d.forEach(u),H=m(e),_=p(e,"ARTICLE",{});var h=l(_);y=p(h,"P",{});var q=l(y);B=f(q,"Sempre que há um novo projeto baseado em React, grande parte dos devs\n    frontend irão passar pelo ritual de configuração inicial. Padrões de\n    implementação de estilos, desacoplamento de componentes e estrutura de\n    diretórios irão emergir -\n    "),J=p(q,"STRONG",{});var E=l(J);Q=f(E,"nem sempre pro bem"),E.forEach(u),V=f(q,". O pior é que todo dev frontend que eu\n    já vi irá resolver o maior problema de todos, o problema de desacoplar\n    lógica de negócio, de uma forma diferente. Em um esforço para criar uma\n    padronização e resolver a questão da camada de domínio aqui na Labcodes, eu\n    pesquisei um bocado e achei uma forma boa e sustentável para lidar com\n    requisições e processamento de dados. O resultado: react-redux-api-tools."),q.forEach(u),K=m(h),W=p(h,"H2",{});var x=l(W);X=f(x,"Vamos imaginar um cenário comum: CRUD"),x.forEach(u),Y=m(h),Z=p(h,"P",{});var b=l(Z);ee=f(b,"Já que o javascript é muito permissivo, há inúmeras maneiras de\n    implementarmos um CRUD em uma SPA. Se limitarmos o escopo ao uso do react,\n    as coisas ficam mais fáceis, mas ainda há possíveis implementações demais.\n    Uma delas é de usar os hooks de ciclo de vida para fazer as requisições. Seu\n    código provavelmente irá ficar parecido com isso:"),b.forEach(u),ae=m(h),c(oe.$$.fragment,h),se=m(h),re=p(h,"P",{});var $=l(re);ne=f($,"Eu acho que não preciso falar muito sobre isso, mas vou falar de qualquer\n    forma: essa implementação, mesmo sendo perfeitamente válida, tem alguns\n    "),ie=p($,"STRONG",{});var P=l(ie);de=f(P,"grandes"),P.forEach(u),te=f($,"\n    problemas."),$.forEach(u),ce=m(h),ue=p(h,"P",{});var S=l(ue);me=f(S,"1.A requisição está sendo feita dentro do componente que, em teoria, deveria\n    ter apenas um trabalho:\n    "),pe=p(S,"STRONG",{});var C=l(pe);le=f(C,"renderizar os dados"),C.forEach(u),fe=f(S,". Se, por exemplo, você precisasse\n    limpar a sessão do usuário ou executar qualquer lógica de negócio, ela\n    provavelmente estaria aqui, o que é\n    "),ge=p(S,"STRONG",{});var z=l(ge);ve=f(z,"ainda pior"),z.forEach(u),he=f(S,";"),qe=p(S,"BR",{}),Ee=f(S,"\n    2. Os dados da resposta da requisição está vivendo dentro do estado do\n    componente, e isso significa que tudo será perdido assim que o componente\n    desmontar;"),xe=p(S,"BR",{}),be=f(S,"\n    3. Você terá\n    "),Re=p(S,"STRONG",{});var j=l(Re);$e=f(j,"sempre"),j.forEach(u),Pe=f(S,"\n    que pegar os dados da API para cada instância do componente, mesmo que já\n    tenha feito essa específica requisição um bilhão de vezes;"),Se=p(S,"BR",{}),Ce=f(S,"\n    4. Não há nenhum estado intermediário entre o início da requisição e sua\n    resposta, então nada de spinners de loading (apesar de você poder\n    implementar essa lógica construindo um\n    "),ze=p(S,"EM",{});var gs=l(ze);Ie=f(gs,"callback hell"),gs.forEach(u),Oe=f(S,"\n    de setStates);"),Le=p(S,"BR",{}),we=f(S,"\n    5. Já que componentes react são hierárquicos, se você precisar desses dados\n    dentro de um componente filho ou pai, você terá que implementar\n    contextos/props e callbacks.\n    "),Te=p(S,"STRONG",{});var vs=l(Te);De=f(vs,"O código fica complicado. RAPIDINHO."),vs.forEach(u),Ae=p(S,"BR",{}),S.forEach(u),je=m(h),Ne=p(h,"P",{});var hs=l(Ne);Ge=f(hs,"Para melhorar esse código, muitos de nós preferem usar uma biblioteca para\n    prover um estado mais global para a aplicação; um estado que vive fora de\n    todos os componentes."),hs.forEach(u),Ue=m(h),ke=p(h,"H2",{});var qs=l(ke);Me=f(qs,"Segundo passo: usando Redux"),qs.forEach(u),Fe=m(h),He=p(h,"P",{});var Es=l(He);_e=f(Es,"Redux é uma das melhores bibliotecas para esse tipo de trabalho. Digamos que\n    você vai usar redux para lidar com dados e lógica de negócio. Assumindo que\n    você usará a camada de reducers para formatar dados e chamar lógicas de\n    domínio, seu componente vai ficar mais ou menos assim:"),Es.forEach(u),ye=m(h),c(Be.$$.fragment,h),Je=m(h),Qe=p(h,"P",{});var xs=l(Qe);Ve=f(xs,"Isso resolve grande parte dos problemas, mas eu diria que essa solução\n    acopla ainda mais o código e, certeza, deixa ele mais difícil de ler e\n    manter. A causa raiz disso tudo é o fato de que o componente está sendo\n    responsável por absolutamente tudo: pegar os dados da API e orquestrar\n    eventos do redux, quando era para ele estar… renderizando coisas. O fluxo\n    ideal para resolver todos os problemas, pelo menos os mais importantes,\n    seria algo similar a isso:"),xs.forEach(u),Ke=m(h),We=p(h,"UL",{class:!0});var bs=l(We);Xe=p(bs,"LI",{});var Rs=l(Xe);Ye=f(Rs,"Componente monta e levanta sinal de isLoading pro Redux"),Rs.forEach(u),Ze=m(bs),ea=p(bs,"LI",{});var $s=l(ea);aa=f($s,"Action do Redux começa a requisição e dispara reducer de isLoading"),$s.forEach(u),oa=m(bs),sa=p(bs,"LI",{});var Ps=l(sa);ra=f(Ps,"Componente renderiza isLoading"),Ps.forEach(u),na=m(bs),ia=p(bs,"LI",{});var Ss=l(ia);da=f(Ss,"Requisição termina assincronamente e dispara reducer de sucesso ou falha"),Ss.forEach(u),ta=m(bs),ca=p(bs,"LI",{});var Cs=l(ca);ua=f(Cs,"Componente renderiza sucesso ou falha"),Cs.forEach(u),bs.forEach(u),ma=m(h),pa=p(h,"P",{});var zs=l(pa);la=f(zs,"Note que a única forma de completamente remover a lógica de negócio dos\n    componentes é acionando os casos de uso de ‘Sucesso’ e ‘Falha’\n    "),fa=p(zs,"STRONG",{});var Is=l(fa);ga=f(Is,"fora do componente"),Is.forEach(u),va=f(zs,". Componentes devem renderizar coisas,\n    não lidar com gerenciamento de estado da\n    "),ha=p(zs,"STRONG",{});var Os=l(ha);qa=f(Os,"aplicação inteira"),Os.forEach(u),Ea=f(zs,". Isso significa que o componente apenas\n    deve avisar a alguém que precisa de dados, disparando um evento (o evento de\n    ‘pega esses dados pra mim’), e então reagir aos dados quando eles estiverem\n    lá. Para respeitar essa ideia, nosso código do componente deveria ser tão\n    simples quanto isso:"),zs.forEach(u),xa=m(h),c(ba.$$.fragment,h),Ra=m(h),$a=p(h,"P",{});var Ls=l($a);Pa=f(Ls,"E isso significa que… as actions devem fazer a requisição dos dados? E\n    reducers iriam disparar outras ações? Soa estranho, né? Porque é. E não é o\n    que eu estou sugerindo\n    "),Sa=p(Ls,"STRONG",{});var ws=l(Sa);Ca=f(ws,"mesmo"),ws.forEach(u),za=f(Ls,"."),Ls.forEach(u),Ia=m(h),Oa=p(h,"H2",{});var Ts=l(Oa);La=f(Ts,"Eis que chegam os middlewares"),Ts.forEach(u),wa=m(h),Ta=p(h,"P",{});var Ds=l(Ta);Da=f(Ds,"Para entregarmos o fluxo ideal de dados,\n    "),Aa=p(Ds,"STRONG",{});var As=l(Aa);ja=f(As,"middlewares do redux são maravilhosos"),As.forEach(u),Na=f(Ds,". Imaginem que\n    queremos que nosso componente seja exatamente como o código que vimos acima.\n    Se nós, por exemplo, tivéssemos algo entre as actions e os reducers, a gente\n    conseguiria fazer com que esse\n    "),Ga=p(Ds,"EM",{});var js=l(Ga);Ua=f(js,"código do meio"),js.forEach(u),ka=m(Ds),Ma=p(Ds,"STRONG",{});var Ns=l(Ma);Fa=f(Ns,"fizesse a requisição"),Ns.forEach(u),Ha=f(Ds,"\n    e, dependendo do resultado,\n    "),_a=p(Ds,"STRONG",{});var Gs=l(_a);ya=f(Gs,"decidisse quais reducers disparar"),Gs.forEach(u),Ba=f(Ds,". Assim, deixaríamos o\n    redux livre para fazer seu trabalho de gerenciar o estado da aplicação e\n    lidar com eventos, enquanto os componentes focariam em renderizar coisas -\n    "),Ja=p(Ds,"STRONG",{});var Us=l(Ja);Qa=f(Us,"somente"),Us.forEach(u),Va=f(Ds,"\n    renderizar coisas. Estou falando sobre algo como isso aqui:"),Ds.forEach(u),Ka=m(h),Wa=p(h,"UL",{class:!0});var ks=l(Wa);Xa=p(ks,"LI",{});var Ms=l(Xa);Ya=f(Ms,"Componente monta e levanta sinal de iniciar a requisição pro Redux"),Ms.forEach(u),Za=m(ks),eo=p(ks,"LI",{});var Fs=l(eo);ao=f(Fs,"Action do Redux descreve reducers de sucesso e falha e declara função que\n      faz a requisição"),Fs.forEach(u),oo=m(ks),so=p(ks,"LI",{});var Hs=l(so);ro=p(Hs,"STRONG",{});var _s=l(ro);no=f(_s,"Middleware chama a função da requisição, guarda a promise e\n        dispara reducer de isLoading"),_s.forEach(u),Hs.forEach(u),io=m(ks),to=p(ks,"LI",{});var ys=l(to);co=f(ys,"Componente renderiza isLoading"),ys.forEach(u),uo=m(ks),mo=p(ks,"LI",{});var Bs=l(mo);po=p(Bs,"STRONG",{});var Js=l(po);lo=f(Js,"Middleware escuta a requisição e chama reducer de sucesso ou falha\n        baseado na descrição da action"),Js.forEach(u),Bs.forEach(u),fo=m(ks),go=p(ks,"LI",{});var Qs=l(go);vo=f(Qs,"Reducer de sucesso ou falha executa código de lógica de negócio e persiste\n      dados na store"),Qs.forEach(u),ho=m(ks),qo=p(ks,"LI",{});var Vs=l(qo);Eo=f(Vs,"Componente renderiza sucesso ou falha"),Vs.forEach(u),ks.forEach(u),xo=m(h),bo=p(h,"P",{});var Ks=l(bo);Ro=f(Ks,"Com esse fluxo proposto, nossas actions poderiam ser mais ou menos assim:"),Ks.forEach(u),$o=m(h),c(Po.$$.fragment,h),So=m(h),Co=p(h,"P",{});var Ws=l(Co);zo=f(Ws,"Ok, vamos com calma. O que você está vendo aí em cima é a nossa convenção\n    atual que descreve uma\n    "),Io=p(Ws,"EM",{});var Xs=l(Io);Oo=f(Xs,"action de requisição"),Xs.forEach(u),Lo=f(Ws,", que usa o middleware incluído no nosso pacote\n    npm\n    "),wo=p(Ws,"A",{href:!0,target:!0,rel:!0});var Ys=l(wo);To=p(Ys,"CODE",{});var Zs=l(To);Do=f(Zs,"react-redux-api-tools"),Zs.forEach(u),Ys.forEach(u),Ao=f(Ws,". Fazer o dispatch\n    dessa action\n    "),jo=p(Ws,"STRONG",{});var er=l(jo);No=f(er,"configura"),er.forEach(u),Go=f(Ws,"\n    o middleware para\n    "),Uo=p(Ws,"STRONG",{});var ar=l(Uo);ko=f(ar,"fazer a requisição"),ar.forEach(u),Mo=f(Ws,"\n    (ao chamar a\n    "),Fo=p(Ws,"CODE",{});var or=l(Fo);Ho=f(or,"apiCallFunction"),or.forEach(u),_o=f(Ws,") e para\n    "),yo=p(Ws,"STRONG",{});var sr=l(yo);Bo=f(sr,"usar o reducer correto"),sr.forEach(u),Jo=f(Ws,"\n    assim que a requisição estiver concluída. Enquanto isso, nossos componentes\n    e reducers se manteriam inalterados:"),Ws.forEach(u),Qo=m(h),c(Vo.$$.fragment,h),Ko=m(h),c(Wo.$$.fragment,h),Xo=m(h),Yo=p(h,"P",{});var rr=l(Yo);Zo=f(rr,"E\n    "),es=p(rr,"EM",{});var nr=l(es);as=f(nr,"voilá,"),nr.forEach(u),os=f(rr,"\n    nosso fluxo está bem mais limpo, simples e desacoplado!"),rr.forEach(u),ss=m(h),rs=p(h,"H2",{});var ir=l(rs);ns=f(ir,"Se você gostou disso ou isso parece mágico demais…"),ir.forEach(u),is=m(h),ds=p(h,"P",{});var dr=l(ds);ts=f(dr,"Gostou na API desse middleware? Quer desenvolver seus projetos react-redux\n    dessa maneira? Está curiosa para saber como tudo isso funciona por baixo dos\n    panos? Então você é uma pessoa que poderia usar e contribuir com nosso\n    pacote npm\n    "),cs=p(dr,"A",{href:!0});var tr=l(cs);us=f(tr,"react-redux-api-tools"),tr.forEach(u),ms=f(dr,".\n    Reportagem de bugs e sugestões de features são bem vindas! E isso tudo é só\n    o começo;\n    "),ps=p(dr,"A",{href:!0});var cr=l(ps);ls=f(cr,"react-redux-api-tools"),cr.forEach(u),fs=f(dr,"\n    traz um monte de outras features que não consegui descrever nesse post. Dê\n    uma boa olhada na nossa documentação para descobrir como melhorar e\n    simplificar seu código usando nossas ferramentas! Obrigado, e até a próxima!"),dr.forEach(u),h.forEach(u),this.h()},h(){A.src!==(j=z)&&g(A,"src",j),g(A,"alt","Ilustração com as logos do React e do Redux"),g(M,"href","/en/decoupling-logic-from-react-components/"),g(We,"class","callout"),g(Wa,"class","callout"),g(wo,"href","https://www.npmjs.com/package/react-redux-api-tools"),g(wo,"target","_blank"),g(wo,"rel","noopener"),g(cs,"href","https://www.npmjs.com/package/react-redux-api-tools"),g(ps,"href","https://www.npmjs.com/package/react-redux-api-tools")},m(s,r){v(a,document.head,null),h(s,o,r),h(s,R,r),q(R,I),q(I,O),h(s,L,r),v(w,s,r),h(s,T,r),h(s,D,r),q(D,A),h(s,N,r),h(s,G,r),q(G,U),q(U,k),q(U,M),q(M,F),h(s,H,r),h(s,_,r),q(_,y),q(y,B),q(y,J),q(J,Q),q(y,V),q(_,K),q(_,W),q(W,X),q(_,Y),q(_,Z),q(Z,ee),q(_,ae),v(oe,_,null),q(_,se),q(_,re),q(re,ne),q(re,ie),q(ie,de),q(re,te),q(_,ce),q(_,ue),q(ue,me),q(ue,pe),q(pe,le),q(ue,fe),q(ue,ge),q(ge,ve),q(ue,he),q(ue,qe),q(ue,Ee),q(ue,xe),q(ue,be),q(ue,Re),q(Re,$e),q(ue,Pe),q(ue,Se),q(ue,Ce),q(ue,ze),q(ze,Ie),q(ue,Oe),q(ue,Le),q(ue,we),q(ue,Te),q(Te,De),q(ue,Ae),q(_,je),q(_,Ne),q(Ne,Ge),q(_,Ue),q(_,ke),q(ke,Me),q(_,Fe),q(_,He),q(He,_e),q(_,ye),v(Be,_,null),q(_,Je),q(_,Qe),q(Qe,Ve),q(_,Ke),q(_,We),q(We,Xe),q(Xe,Ye),q(We,Ze),q(We,ea),q(ea,aa),q(We,oa),q(We,sa),q(sa,ra),q(We,na),q(We,ia),q(ia,da),q(We,ta),q(We,ca),q(ca,ua),q(_,ma),q(_,pa),q(pa,la),q(pa,fa),q(fa,ga),q(pa,va),q(pa,ha),q(ha,qa),q(pa,Ea),q(_,xa),v(ba,_,null),q(_,Ra),q(_,$a),q($a,Pa),q($a,Sa),q(Sa,Ca),q($a,za),q(_,Ia),q(_,Oa),q(Oa,La),q(_,wa),q(_,Ta),q(Ta,Da),q(Ta,Aa),q(Aa,ja),q(Ta,Na),q(Ta,Ga),q(Ga,Ua),q(Ta,ka),q(Ta,Ma),q(Ma,Fa),q(Ta,Ha),q(Ta,_a),q(_a,ya),q(Ta,Ba),q(Ta,Ja),q(Ja,Qa),q(Ta,Va),q(_,Ka),q(_,Wa),q(Wa,Xa),q(Xa,Ya),q(Wa,Za),q(Wa,eo),q(eo,ao),q(Wa,oo),q(Wa,so),q(so,ro),q(ro,no),q(Wa,io),q(Wa,to),q(to,co),q(Wa,uo),q(Wa,mo),q(mo,po),q(po,lo),q(Wa,fo),q(Wa,go),q(go,vo),q(Wa,ho),q(Wa,qo),q(qo,Eo),q(_,xo),q(_,bo),q(bo,Ro),q(_,$o),v(Po,_,null),q(_,So),q(_,Co),q(Co,zo),q(Co,Io),q(Io,Oo),q(Co,Lo),q(Co,wo),q(wo,To),q(To,Do),q(Co,Ao),q(Co,jo),q(jo,No),q(Co,Go),q(Co,Uo),q(Uo,ko),q(Co,Mo),q(Co,Fo),q(Fo,Ho),q(Co,_o),q(Co,yo),q(yo,Bo),q(Co,Jo),q(_,Qo),v(Vo,_,null),q(_,Ko),v(Wo,_,null),q(_,Xo),q(_,Yo),q(Yo,Zo),q(Yo,es),q(es,as),q(Yo,os),q(_,ss),q(_,rs),q(rs,ns),q(_,is),q(_,ds),q(ds,ts),q(ds,cs),q(cs,us),q(ds,ms),q(ds,ps),q(ps,ls),q(ds,fs),e[2](_),gs=!0},p(e,[a]){const o={};2&a&&(o.text=e[1]),w.$set(o)},i(e){gs||(E(a.$$.fragment,e),E(w.$$.fragment,e),E(oe.$$.fragment,e),E(Be.$$.fragment,e),E(ba.$$.fragment,e),E(Po.$$.fragment,e),E(Vo.$$.fragment,e),E(Wo.$$.fragment,e),gs=!0)},o(e){x(a.$$.fragment,e),x(w.$$.fragment,e),x(oe.$$.fragment,e),x(Be.$$.fragment,e),x(ba.$$.fragment,e),x(Po.$$.fragment,e),x(Vo.$$.fragment,e),x(Wo.$$.fragment,e),gs=!1},d(s){b(a),s&&u(o),s&&u(R),s&&u(L),b(w,s),s&&u(T),s&&u(D),s&&u(N),s&&u(G),s&&u(H),s&&u(_),b(oe),b(Be),b(ba),b(Po),b(Vo),b(Wo),e[2](null)}}}function O(e,a,o){let s,r;return e.$$.update=()=>{1&e.$$.dirty&&o(1,r=s&&s.textContent)},[s,r,function(e){R[e?"unshift":"push"]((()=>{s=e,o(0,s)}))}]}export default class extends e{constructor(e){super(),a(this,e,O,I,o,{})}}
