import{S as e,i as a,s as o,E as r,w as s,F as n,G as t,c as i,e as c,x as d,d as m,H as u,k as h,I as l,g as p,n as f}from"./client.ba4c128a.js";function g(e){let a,o,g,v,b,E,q,O,D,C,x,j,z,G,I,w,R,P,H,M,T,S,A,F,N,U,k,y,K,L,V,B,J,Q,W,X,Y,Z,$,_,ee,ae,oe,re,se,ne,te,ie,ce,de,me,ue,he,le,pe,fe,ge,ve,be,Ee,qe,Oe,De,Ce,xe,je,ze,Ge,Ie,we,Re,Pe,He,Me,Te,Se,Ae,Fe,Ne,Ue,ke,ye,Ke,Le,Ve,Be,Je,Qe,We,Xe,Ye,Ze,$e,_e,ea,aa,oa,ra,sa,na,ta,ia,ca,da,ma,ua,ha,la,pa,fa,ga,va,ba,Ea,qa,Oa,Da,Ca,xa,ja,za,Ga,Ia,wa,Ra,Pa,Ha,Ma,Ta,Sa,Aa,Fa,Na,Ua,ka,ya,Ka,La,Va,Ba,Ja,Qa,Wa,Xa,Ya,Za,$a,_a,eo,ao,oo,ro,so,no,to,io,co,mo,uo,ho,lo,po,fo,go,vo,bo,Eo,qo,Oo,Do,Co,xo,jo,zo,Go,Io,wo,Ro,Po,Ho,Mo,To,So,Ao,Fo,No,Uo,ko,yo,Ko,Lo,Vo,Bo,Jo,Qo,Wo,Xo,Yo,Zo,$o,_o,er,ar,or,rr,sr,nr,tr,ir,cr,dr,mr,ur,hr,lr,pr,fr,gr,vr,br,Er,qr,Or,Dr,Cr,xr,jr,zr,Gr,Ir,wr,Rr,Pr,Hr,Mr,Tr,Sr,Ar,Fr,Nr,Ur,kr,yr,Kr,Lr,Vr,Br,Jr,Qr,Wr,Xr,Yr,Zr,$r,_r,es,as,os,rs,ss,ns,ts,is,cs,ds,ms,us,hs,ls,ps,fs,gs,vs,bs,Es,qs,Os,Ds;return{c(){a=r("meta"),o=r("meta"),g=s(),v=r("h1"),b=r("mark"),E=n("git e github parte 3: boas práticas de organização de branches"),q=s(),O=r("p"),D=n("2016-02-19"),C=s(),x=r("figure"),j=r("img"),G=s(),I=r("p"),w=n("chegamos à parte 3 dos posts sobre git e github! nos\n  "),R=r("a"),P=n("outros"),H=s(),M=r("a"),T=n("dois"),S=n(",\n  falei sobre o que são o git e o github e slguns conceitos básicos pra começar\n  a usar o git. hoje, vou falar mais sobre algumas boas práticas pra organização\n  de branches, baseado nas sugestões do\n  "),A=r("a"),F=n("git flow"),N=n("."),U=s(),k=r("hr"),y=s(),K=r("h3"),L=n("o que é o git flow?"),V=s(),B=r("p"),J=n("o\n  "),Q=r("strong"),W=n("git flow"),X=n("\n  é uma extensão do git que permite uma maior organização e agilidade na hora de\n  lidar com o git. ele segue uma série de convenções que caracterizam alguns\n  tipos de branches com responsabilidades diferentes, próprias pra cada etapa do\n  processo de desenvolvimento. vou detalhar melhor o papel de cada um dos tipos\n  de branch."),Y=s(),Z=r("div"),$=r("p"),_=r("strong"),ee=n("lembre-se:"),ae=s(),oe=r("p"),re=n("essas são apenas\n    "),se=r("strong"),ne=n("sugestões"),te=n("\n    minhas e das próprias convenções do git flow."),ie=s(),ce=r("p"),de=n("o uso dessas sugestões muda de projeto a projeto, apesar dessas sugestões\n    funcionarem em grande parte dos casos."),me=s(),ue=r("h3"),he=n("branch "),le=r("code"),pe=n("master/main"),fe=s(),ge=r("figure"),ve=r("img"),Ee=s(),qe=r("p"),Oe=n("o branch\n  "),De=r("code"),Ce=n("master"),xe=n("\n  (ou, preferivelmente,\n  "),je=r("code"),ze=n("main"),Ge=n(") é o branch no qual está o código que está em\n  "),Ie=r("strong"),we=n("produção"),Re=n(", ou seja, que está sendo\n  "),Pe=r("strong"),He=n("diretamente usado pelos clientes"),Me=n(". ele é caracterizado por sua\n  grande quantidade de\n  "),Te=r("strong"),Se=n("tags"),Ae=n(", que refletem cada versão do projeto que foi pra uso\n  corrente. nele, não se deve ter commits soltos; devemos apenas adicionar\n  commits nele através de merges de branches de\n  "),Fe=r("code"),Ne=n("release"),Ue=n("\n  e de\n  "),ke=r("code"),ye=n("hotfix"),Ke=n("."),Le=s(),Ve=r("h3"),Be=n("branch "),Je=r("code"),Qe=n("develop"),We=s(),Xe=r("figure"),Ye=r("img"),$e=s(),_e=r("p"),ea=n("o branch\n  "),aa=r("code"),oa=n("develop"),ra=n("\n  é o que contém o código previsto para a próxima\n  "),sa=r("code"),na=n("release"),ta=n(", ou seja, o próximo código que irá pro ar. nele, também\n  não devemos commitar diretamente, deixando que seu código seja fornecido pelos\n  branches de\n  "),ia=r("code"),ca=n("feature"),da=n("\n  e\n  "),ma=r("code"),ua=n("hotfix"),ha=n(", mas essa regra é um pouco mais flexível que a do\n  "),la=r("code"),pa=n("master"),fa=n(". uma boa prática é sempre deixá-lo estável, pronto para ir\n  para o ar a qualquer momento, para evitar que uma funcionalidade não vá pro ar\n  por causa de instabilidade de outras."),ga=s(),va=r("h3"),ba=n("branches de "),Ea=r("code"),qa=n("release"),Oa=s(),Da=r("figure"),Ca=r("img"),ja=s(),za=r("p"),Ga=n("os branches de\n  "),Ia=r("code"),wa=n("release"),Ra=n("\n  são aqueles que resumem o que uma nova versão do seu projeto terá. ele tem a\n  responsabilidade de sair do\n  "),Pa=r("code"),Ha=n("develop"),Ma=n(", se mergear no\n  "),Ta=r("code"),Sa=n("master"),Aa=n("\n  e no\n  "),Fa=r("code"),Na=n("develop"),Ua=n("\n  e, ao mergear no\n  "),ka=r("code"),ya=n("master"),Ka=n(", criar uma\n  "),La=r("code"),Va=n("tag"),Ba=n("\n  com o número da nova versão. geralmente, recebem o nome\n  "),Ja=r("code"),Qa=n("release/[numero-da-versao]"),Wa=n(". na minha experiência, acho uma má\n  ideia commitar em branches de\n  "),Xa=r("code"),Ya=n("release"),Za=n(", pelo simples motivo que, assim, temos certeza de que\n  todo o código veio dos\n  "),$a=r("code"),_a=n("hotfixes"),eo=n("\n  e das\n  "),ao=r("code"),oo=n("features"),ro=n(". dessa forma, os branches de\n  "),so=r("code"),no=n("release"),to=n("\n  servem\n  "),io=r("strong"),co=n("apenas como um ritual"),mo=n("\n  para que você tenha\n  "),uo=r("strong"),ho=n("certeza"),lo=n("\n  do que está colocando no ar e qual é a versão desejada. é uma burocracia que\n  já salvou minha vida algumas vezes. ;)"),po=s(),fo=r("h3"),go=n("branches de "),vo=r("code"),bo=n("hotfix"),Eo=s(),qo=r("figure"),Oo=r("img"),Co=s(),xo=r("p"),jo=n("os branches de\n  "),zo=r("code"),Go=n("hotfix"),Io=n("\n  são os que são abertos na hora que algo em produção dá problema. são branches\n  criados a partir do\n  "),wo=r("code"),Ro=n("master"),Po=n("\n  e que se mergeiam novamente no\n  "),Ho=r("code"),Mo=n("master"),To=n("\n  e no\n  "),So=r("code"),Ao=n("develop"),Fo=n(", já que precisamos das correções também no código que\n  está sendo desenvolvido. geralmente, recebem o nome\n  "),No=r("code"),Uo=n("hotfix/[numero-da-versao]"),ko=n(". eles também recebem suas próprias\n  "),yo=r("code"),Ko=n("tags"),Lo=n(", que servem para dizer que, nesta versão, o problema x foi\n  corrigido."),Vo=s(),Bo=r("h3"),Jo=n("branches de "),Qo=r("code"),Wo=n("feature"),Xo=s(),Yo=r("figure"),Zo=r("img"),_o=s(),er=r("p"),ar=n("os branches de\n  "),or=r("code"),rr=n("feature"),sr=n("\n  servem para, bem, features, né. eles partem do\n  "),nr=r("code"),tr=n("develop"),ir=n("\n  e mergeiam também no\n  "),cr=r("code"),dr=n("develop"),mr=n(". geralmente, recebem o nome\n  "),ur=r("code"),hr=n("feature/[descricao-da-funcionalidade]"),lr=n(". neles, commitamos o que é\n  necessário para novas funcionalidades ficarem prontas, apesar de que eu,\n  novamente, não recomendo que sejam feitos commits diretamente nele. o motivo\n  disso é que, ao meu ver, features têm a tendência de terem muitos commits, o\n  que deixaria difícil a revisão do código em um\n  "),pr=r("em"),fr=n("pull request"),gr=n(". recomendo que, a partir dos branches de\n  "),vr=r("code"),br=n("feature"),Er=n(", sejam criados branches de\n  "),qr=r("code"),Or=n("topic"),Dr=n(", que terão o conteúdo de uma parte da funcionalidade, em um\n  tamanho que permita a fácil revisão do código por outras pessoas."),Cr=s(),xr=r("h3"),jr=n("branches de "),zr=r("code"),Gr=n("topic"),Ir=s(),wr=r("figure"),Rr=r("img"),Hr=s(),Mr=r("p"),Tr=n("os branches de\n  "),Sr=r("code"),Ar=n("topic"),Fr=n("\n  são os coringas. geralmente, recebem o nome\n  "),Nr=r("code"),Ur=n("topic/[nome-do-topico-abordado]"),kr=n(". são usados em qualquer lugar em\n  que seja legal ter mais de um tópico, para facilitar a revisão de código. na\n  real, uso os branches de\n  "),yr=r("code"),Kr=n("topic"),Lr=n("\n  saindo dos de\n  "),Vr=r("code"),Br=n("feature"),Jr=n("\n  e mergeando nos mesmos, ou partindo de um branch de\n  "),Qr=r("code"),Wr=n("hotfix"),Xr=n("\n  e mergeando nos mesmos. são os menores branches, feitos para serem lidos e\n  revisados rapidamente."),Yr=s(),Zr=r("h3"),$r=n("e o que o git flow tem a ver com isso tudo?"),_r=s(),es=r("p"),as=n("o git flow, como eu disse, é uma extensão do git. ele cria comandos que servem\n  de atalhos para os processos descritos acima. ele tem comandos para abrir e\n  fechar\n  "),os=r("code"),rs=n("releases"),ss=n(",\n  "),ns=r("code"),ts=n("features"),is=n("\n  e\n  "),cs=r("code"),ds=n("hotfixes"),ms=n(", e é facilmente configurável. se essa organização de\n  branches te interessou, acho que vale a pena dar uma olhada no\n  "),us=r("a"),hs=n("repositório deles"),ls=n("\n  e ler o\n  "),ps=r("a"),fs=n("post sobre\n    o workflow deles"),gs=n(". nesse post, eles detalham melhor o que é realmente\n  necessário ser feito pra realizar essa proposta de organização."),vs=s(),bs=r("p"),Es=n("como sempre, qualquer dúvida ou sugestão, é só falar nos comentários. espero\n  que tenham gostado dessa série de posts e que tenha sido útil :D"),qs=s(),Os=r("p"),Ds=n("eu fico por aqui, até a próxima! o/"),this.h()},l(e){const r=t('[data-svelte="svelte-1idbew5"]',document.head);a=i(r,"META",{name:!0,content:!0}),o=i(r,"META",{name:!0,content:!0}),r.forEach(c),g=d(e),v=i(e,"H1",{});var s=m(v);b=i(s,"MARK",{});var n=m(b);E=u(n,"git e github parte 3: boas práticas de organização de branches"),n.forEach(c),s.forEach(c),q=d(e),O=i(e,"P",{class:!0});var h=m(O);D=u(h,"2016-02-19"),h.forEach(c),C=d(e),x=i(e,"FIGURE",{});var l=m(x);j=i(l,"IMG",{src:!0,alt:!0}),l.forEach(c),G=d(e),I=i(e,"P",{});var p=m(I);w=u(p,"chegamos à parte 3 dos posts sobre git e github! nos\n  "),R=i(p,"A",{href:!0});var f=m(R);P=u(f,"outros"),f.forEach(c),H=d(p),M=i(p,"A",{href:!0});var z=m(M);T=u(z,"dois"),z.forEach(c),S=u(p,",\n  falei sobre o que são o git e o github e slguns conceitos básicos pra começar\n  a usar o git. hoje, vou falar mais sobre algumas boas práticas pra organização\n  de branches, baseado nas sugestões do\n  "),A=i(p,"A",{href:!0});var be=m(A);F=u(be,"git flow"),be.forEach(c),N=u(p,"."),p.forEach(c),U=d(e),k=i(e,"HR",{}),y=d(e),K=i(e,"H3",{});var Ze=m(K);L=u(Ze,"o que é o git flow?"),Ze.forEach(c),V=d(e),B=i(e,"P",{});var xa=m(B);J=u(xa,"o\n  "),Q=i(xa,"STRONG",{});var Do=m(Q);W=u(Do,"git flow"),Do.forEach(c),X=u(xa,"\n  é uma extensão do git que permite uma maior organização e agilidade na hora de\n  lidar com o git. ele segue uma série de convenções que caracterizam alguns\n  tipos de branches com responsabilidades diferentes, próprias pra cada etapa do\n  processo de desenvolvimento. vou detalhar melhor o papel de cada um dos tipos\n  de branch."),xa.forEach(c),Y=d(e),Z=i(e,"DIV",{class:!0});var $o=m(Z);$=i($o,"P",{});var Pr=m($);_=i(Pr,"STRONG",{});var Cs=m(_);ee=u(Cs,"lembre-se:"),Cs.forEach(c),Pr.forEach(c),ae=d($o),oe=i($o,"P",{});var xs=m(oe);re=u(xs,"essas são apenas\n    "),se=i(xs,"STRONG",{});var js=m(se);ne=u(js,"sugestões"),js.forEach(c),te=u(xs,"\n    minhas e das próprias convenções do git flow."),xs.forEach(c),ie=d($o),ce=i($o,"P",{});var zs=m(ce);de=u(zs,"o uso dessas sugestões muda de projeto a projeto, apesar dessas sugestões\n    funcionarem em grande parte dos casos."),zs.forEach(c),$o.forEach(c),me=d(e),ue=i(e,"H3",{});var Gs=m(ue);he=u(Gs,"branch "),le=i(Gs,"CODE",{});var Is=m(le);pe=u(Is,"master/main"),Is.forEach(c),Gs.forEach(c),fe=d(e),ge=i(e,"FIGURE",{});var ws=m(ge);ve=i(ws,"IMG",{src:!0,alt:!0}),ws.forEach(c),Ee=d(e),qe=i(e,"P",{});var Rs=m(qe);Oe=u(Rs,"o branch\n  "),De=i(Rs,"CODE",{});var Ps=m(De);Ce=u(Ps,"master"),Ps.forEach(c),xe=u(Rs,"\n  (ou, preferivelmente,\n  "),je=i(Rs,"CODE",{});var Hs=m(je);ze=u(Hs,"main"),Hs.forEach(c),Ge=u(Rs,") é o branch no qual está o código que está em\n  "),Ie=i(Rs,"STRONG",{});var Ms=m(Ie);we=u(Ms,"produção"),Ms.forEach(c),Re=u(Rs,", ou seja, que está sendo\n  "),Pe=i(Rs,"STRONG",{});var Ts=m(Pe);He=u(Ts,"diretamente usado pelos clientes"),Ts.forEach(c),Me=u(Rs,". ele é caracterizado por sua\n  grande quantidade de\n  "),Te=i(Rs,"STRONG",{});var Ss=m(Te);Se=u(Ss,"tags"),Ss.forEach(c),Ae=u(Rs,", que refletem cada versão do projeto que foi pra uso\n  corrente. nele, não se deve ter commits soltos; devemos apenas adicionar\n  commits nele através de merges de branches de\n  "),Fe=i(Rs,"CODE",{});var As=m(Fe);Ne=u(As,"release"),As.forEach(c),Ue=u(Rs,"\n  e de\n  "),ke=i(Rs,"CODE",{});var Fs=m(ke);ye=u(Fs,"hotfix"),Fs.forEach(c),Ke=u(Rs,"."),Rs.forEach(c),Le=d(e),Ve=i(e,"H3",{});var Ns=m(Ve);Be=u(Ns,"branch "),Je=i(Ns,"CODE",{});var Us=m(Je);Qe=u(Us,"develop"),Us.forEach(c),Ns.forEach(c),We=d(e),Xe=i(e,"FIGURE",{});var ks=m(Xe);Ye=i(ks,"IMG",{src:!0,alt:!0}),ks.forEach(c),$e=d(e),_e=i(e,"P",{});var ys=m(_e);ea=u(ys,"o branch\n  "),aa=i(ys,"CODE",{});var Ks=m(aa);oa=u(Ks,"develop"),Ks.forEach(c),ra=u(ys,"\n  é o que contém o código previsto para a próxima\n  "),sa=i(ys,"CODE",{});var Ls=m(sa);na=u(Ls,"release"),Ls.forEach(c),ta=u(ys,", ou seja, o próximo código que irá pro ar. nele, também\n  não devemos commitar diretamente, deixando que seu código seja fornecido pelos\n  branches de\n  "),ia=i(ys,"CODE",{});var Vs=m(ia);ca=u(Vs,"feature"),Vs.forEach(c),da=u(ys,"\n  e\n  "),ma=i(ys,"CODE",{});var Bs=m(ma);ua=u(Bs,"hotfix"),Bs.forEach(c),ha=u(ys,", mas essa regra é um pouco mais flexível que a do\n  "),la=i(ys,"CODE",{});var Js=m(la);pa=u(Js,"master"),Js.forEach(c),fa=u(ys,". uma boa prática é sempre deixá-lo estável, pronto para ir\n  para o ar a qualquer momento, para evitar que uma funcionalidade não vá pro ar\n  por causa de instabilidade de outras."),ys.forEach(c),ga=d(e),va=i(e,"H3",{});var Qs=m(va);ba=u(Qs,"branches de "),Ea=i(Qs,"CODE",{});var Ws=m(Ea);qa=u(Ws,"release"),Ws.forEach(c),Qs.forEach(c),Oa=d(e),Da=i(e,"FIGURE",{});var Xs=m(Da);Ca=i(Xs,"IMG",{src:!0,alt:!0}),Xs.forEach(c),ja=d(e),za=i(e,"P",{});var Ys=m(za);Ga=u(Ys,"os branches de\n  "),Ia=i(Ys,"CODE",{});var Zs=m(Ia);wa=u(Zs,"release"),Zs.forEach(c),Ra=u(Ys,"\n  são aqueles que resumem o que uma nova versão do seu projeto terá. ele tem a\n  responsabilidade de sair do\n  "),Pa=i(Ys,"CODE",{});var $s=m(Pa);Ha=u($s,"develop"),$s.forEach(c),Ma=u(Ys,", se mergear no\n  "),Ta=i(Ys,"CODE",{});var _s=m(Ta);Sa=u(_s,"master"),_s.forEach(c),Aa=u(Ys,"\n  e no\n  "),Fa=i(Ys,"CODE",{});var en=m(Fa);Na=u(en,"develop"),en.forEach(c),Ua=u(Ys,"\n  e, ao mergear no\n  "),ka=i(Ys,"CODE",{});var an=m(ka);ya=u(an,"master"),an.forEach(c),Ka=u(Ys,", criar uma\n  "),La=i(Ys,"CODE",{});var on=m(La);Va=u(on,"tag"),on.forEach(c),Ba=u(Ys,"\n  com o número da nova versão. geralmente, recebem o nome\n  "),Ja=i(Ys,"CODE",{});var rn=m(Ja);Qa=u(rn,"release/[numero-da-versao]"),rn.forEach(c),Wa=u(Ys,". na minha experiência, acho uma má\n  ideia commitar em branches de\n  "),Xa=i(Ys,"CODE",{});var sn=m(Xa);Ya=u(sn,"release"),sn.forEach(c),Za=u(Ys,", pelo simples motivo que, assim, temos certeza de que\n  todo o código veio dos\n  "),$a=i(Ys,"CODE",{});var nn=m($a);_a=u(nn,"hotfixes"),nn.forEach(c),eo=u(Ys,"\n  e das\n  "),ao=i(Ys,"CODE",{});var tn=m(ao);oo=u(tn,"features"),tn.forEach(c),ro=u(Ys,". dessa forma, os branches de\n  "),so=i(Ys,"CODE",{});var cn=m(so);no=u(cn,"release"),cn.forEach(c),to=u(Ys,"\n  servem\n  "),io=i(Ys,"STRONG",{});var dn=m(io);co=u(dn,"apenas como um ritual"),dn.forEach(c),mo=u(Ys,"\n  para que você tenha\n  "),uo=i(Ys,"STRONG",{});var mn=m(uo);ho=u(mn,"certeza"),mn.forEach(c),lo=u(Ys,"\n  do que está colocando no ar e qual é a versão desejada. é uma burocracia que\n  já salvou minha vida algumas vezes. ;)"),Ys.forEach(c),po=d(e),fo=i(e,"H3",{});var un=m(fo);go=u(un,"branches de "),vo=i(un,"CODE",{});var hn=m(vo);bo=u(hn,"hotfix"),hn.forEach(c),un.forEach(c),Eo=d(e),qo=i(e,"FIGURE",{});var ln=m(qo);Oo=i(ln,"IMG",{src:!0,alt:!0}),ln.forEach(c),Co=d(e),xo=i(e,"P",{});var pn=m(xo);jo=u(pn,"os branches de\n  "),zo=i(pn,"CODE",{});var fn=m(zo);Go=u(fn,"hotfix"),fn.forEach(c),Io=u(pn,"\n  são os que são abertos na hora que algo em produção dá problema. são branches\n  criados a partir do\n  "),wo=i(pn,"CODE",{});var gn=m(wo);Ro=u(gn,"master"),gn.forEach(c),Po=u(pn,"\n  e que se mergeiam novamente no\n  "),Ho=i(pn,"CODE",{});var vn=m(Ho);Mo=u(vn,"master"),vn.forEach(c),To=u(pn,"\n  e no\n  "),So=i(pn,"CODE",{});var bn=m(So);Ao=u(bn,"develop"),bn.forEach(c),Fo=u(pn,", já que precisamos das correções também no código que\n  está sendo desenvolvido. geralmente, recebem o nome\n  "),No=i(pn,"CODE",{});var En=m(No);Uo=u(En,"hotfix/[numero-da-versao]"),En.forEach(c),ko=u(pn,". eles também recebem suas próprias\n  "),yo=i(pn,"CODE",{});var qn=m(yo);Ko=u(qn,"tags"),qn.forEach(c),Lo=u(pn,", que servem para dizer que, nesta versão, o problema x foi\n  corrigido."),pn.forEach(c),Vo=d(e),Bo=i(e,"H3",{});var On=m(Bo);Jo=u(On,"branches de "),Qo=i(On,"CODE",{});var Dn=m(Qo);Wo=u(Dn,"feature"),Dn.forEach(c),On.forEach(c),Xo=d(e),Yo=i(e,"FIGURE",{});var Cn=m(Yo);Zo=i(Cn,"IMG",{src:!0,alt:!0}),Cn.forEach(c),_o=d(e),er=i(e,"P",{});var xn=m(er);ar=u(xn,"os branches de\n  "),or=i(xn,"CODE",{});var jn=m(or);rr=u(jn,"feature"),jn.forEach(c),sr=u(xn,"\n  servem para, bem, features, né. eles partem do\n  "),nr=i(xn,"CODE",{});var zn=m(nr);tr=u(zn,"develop"),zn.forEach(c),ir=u(xn,"\n  e mergeiam também no\n  "),cr=i(xn,"CODE",{});var Gn=m(cr);dr=u(Gn,"develop"),Gn.forEach(c),mr=u(xn,". geralmente, recebem o nome\n  "),ur=i(xn,"CODE",{});var In=m(ur);hr=u(In,"feature/[descricao-da-funcionalidade]"),In.forEach(c),lr=u(xn,". neles, commitamos o que é\n  necessário para novas funcionalidades ficarem prontas, apesar de que eu,\n  novamente, não recomendo que sejam feitos commits diretamente nele. o motivo\n  disso é que, ao meu ver, features têm a tendência de terem muitos commits, o\n  que deixaria difícil a revisão do código em um\n  "),pr=i(xn,"EM",{});var wn=m(pr);fr=u(wn,"pull request"),wn.forEach(c),gr=u(xn,". recomendo que, a partir dos branches de\n  "),vr=i(xn,"CODE",{});var Rn=m(vr);br=u(Rn,"feature"),Rn.forEach(c),Er=u(xn,", sejam criados branches de\n  "),qr=i(xn,"CODE",{});var Pn=m(qr);Or=u(Pn,"topic"),Pn.forEach(c),Dr=u(xn,", que terão o conteúdo de uma parte da funcionalidade, em um\n  tamanho que permita a fácil revisão do código por outras pessoas."),xn.forEach(c),Cr=d(e),xr=i(e,"H3",{});var Hn=m(xr);jr=u(Hn,"branches de "),zr=i(Hn,"CODE",{});var Mn=m(zr);Gr=u(Mn,"topic"),Mn.forEach(c),Hn.forEach(c),Ir=d(e),wr=i(e,"FIGURE",{});var Tn=m(wr);Rr=i(Tn,"IMG",{src:!0,alt:!0}),Tn.forEach(c),Hr=d(e),Mr=i(e,"P",{});var Sn=m(Mr);Tr=u(Sn,"os branches de\n  "),Sr=i(Sn,"CODE",{});var An=m(Sr);Ar=u(An,"topic"),An.forEach(c),Fr=u(Sn,"\n  são os coringas. geralmente, recebem o nome\n  "),Nr=i(Sn,"CODE",{});var Fn=m(Nr);Ur=u(Fn,"topic/[nome-do-topico-abordado]"),Fn.forEach(c),kr=u(Sn,". são usados em qualquer lugar em\n  que seja legal ter mais de um tópico, para facilitar a revisão de código. na\n  real, uso os branches de\n  "),yr=i(Sn,"CODE",{});var Nn=m(yr);Kr=u(Nn,"topic"),Nn.forEach(c),Lr=u(Sn,"\n  saindo dos de\n  "),Vr=i(Sn,"CODE",{});var Un=m(Vr);Br=u(Un,"feature"),Un.forEach(c),Jr=u(Sn,"\n  e mergeando nos mesmos, ou partindo de um branch de\n  "),Qr=i(Sn,"CODE",{});var kn=m(Qr);Wr=u(kn,"hotfix"),kn.forEach(c),Xr=u(Sn,"\n  e mergeando nos mesmos. são os menores branches, feitos para serem lidos e\n  revisados rapidamente."),Sn.forEach(c),Yr=d(e),Zr=i(e,"H3",{});var yn=m(Zr);$r=u(yn,"e o que o git flow tem a ver com isso tudo?"),yn.forEach(c),_r=d(e),es=i(e,"P",{});var Kn=m(es);as=u(Kn,"o git flow, como eu disse, é uma extensão do git. ele cria comandos que servem\n  de atalhos para os processos descritos acima. ele tem comandos para abrir e\n  fechar\n  "),os=i(Kn,"CODE",{});var Ln=m(os);rs=u(Ln,"releases"),Ln.forEach(c),ss=u(Kn,",\n  "),ns=i(Kn,"CODE",{});var Vn=m(ns);ts=u(Vn,"features"),Vn.forEach(c),is=u(Kn,"\n  e\n  "),cs=i(Kn,"CODE",{});var Bn=m(cs);ds=u(Bn,"hotfixes"),Bn.forEach(c),ms=u(Kn,", e é facilmente configurável. se essa organização de\n  branches te interessou, acho que vale a pena dar uma olhada no\n  "),us=i(Kn,"A",{href:!0});var Jn=m(us);hs=u(Jn,"repositório deles"),Jn.forEach(c),ls=u(Kn,"\n  e ler o\n  "),ps=i(Kn,"A",{href:!0});var Qn=m(ps);fs=u(Qn,"post sobre\n    o workflow deles"),Qn.forEach(c),gs=u(Kn,". nesse post, eles detalham melhor o que é realmente\n  necessário ser feito pra realizar essa proposta de organização."),Kn.forEach(c),vs=d(e),bs=i(e,"P",{});var Wn=m(bs);Es=u(Wn,"como sempre, qualquer dúvida ou sugestão, é só falar nos comentários. espero\n  que tenham gostado dessa série de posts e que tenha sido útil :D"),Wn.forEach(c),qs=d(e),Os=i(e,"P",{});var Xn=m(Os);Ds=u(Xn,"eu fico por aqui, até a próxima! o/"),Xn.forEach(c),this.h()},h(){document.title="\n    git e github parte 3: boas práticas de organização de branches -\n    luciano@ratamero.com\n  ",h(a,"name","description"),h(a,"content","Esse post explica os conceitos básicos de Git e como ele interaje com o Github; tudo isso da forma mais didática possível :]"),h(o,"name","keywords"),h(o,"content","Luciano Ratamero, git, github, boas práticas, organização de branches, parte 3"),h(O,"class","meta"),j.src!==(z="https://lucianoratamero.github.io/img/cover-git-3.png")&&h(j,"src","https://lucianoratamero.github.io/img/cover-git-3.png"),h(j,"alt","Ilustração com logo do git e do github"),h(R,"href","https://lucianoratamero.github.io/blog/git-e-github-parte-1-o-que-sao-e-como-usar/"),h(M,"href","https://lucianoratamero.github.io/blog/git-e-github-parte-2-conceitos-basicos-para-trabalhar-com-git/"),h(A,"href","https://github.com/nvie/gitflow"),h(Z,"class","alert alert-info text-center"),ve.src!==(be="https://lucianoratamero.github.io/img/master.jpg")&&h(ve,"src","https://lucianoratamero.github.io/img/master.jpg"),h(ve,"alt","Ilustração de uma branch principal, chamada master ou main"),Ye.src!==(Ze="https://lucianoratamero.github.io/img/develop.jpg")&&h(Ye,"src","https://lucianoratamero.github.io/img/develop.jpg"),h(Ye,"alt","Ilustração de uma branch paralela à principal, chamada develop"),Ca.src!==(xa="https://lucianoratamero.github.io/img/release.jpg")&&h(Ca,"src","https://lucianoratamero.github.io/img/release.jpg"),h(Ca,"alt","Ilustração de uma branch saindo de develop e dando merge na principal"),Oo.src!==(Do="https://lucianoratamero.github.io/img/hotfix.jpg")&&h(Oo,"src","https://lucianoratamero.github.io/img/hotfix.jpg"),h(Oo,"alt","Ilustração de uma branch saindo da principal e dando merge na principal e na develop"),Zo.src!==($o="https://lucianoratamero.github.io/img/feature.jpg")&&h(Zo,"src","https://lucianoratamero.github.io/img/feature.jpg"),h(Zo,"alt","Ilustração de uma branch saindo da develop e dando merge na develop"),Rr.src!==(Pr="https://lucianoratamero.github.io/img/topic.jpg")&&h(Rr,"src","https://lucianoratamero.github.io/img/topic.jpg"),h(Rr,"alt","Ilustração de uma branch saindo de uma feature e mergeando na mesma"),h(us,"href","https://github.com/nvie/gitflow"),h(ps,"href","https://nvie.com/posts/a-successful-git-branching-model/")},m(e,r){l(document.head,a),l(document.head,o),p(e,g,r),p(e,v,r),l(v,b),l(b,E),p(e,q,r),p(e,O,r),l(O,D),p(e,C,r),p(e,x,r),l(x,j),p(e,G,r),p(e,I,r),l(I,w),l(I,R),l(R,P),l(I,H),l(I,M),l(M,T),l(I,S),l(I,A),l(A,F),l(I,N),p(e,U,r),p(e,k,r),p(e,y,r),p(e,K,r),l(K,L),p(e,V,r),p(e,B,r),l(B,J),l(B,Q),l(Q,W),l(B,X),p(e,Y,r),p(e,Z,r),l(Z,$),l($,_),l(_,ee),l(Z,ae),l(Z,oe),l(oe,re),l(oe,se),l(se,ne),l(oe,te),l(Z,ie),l(Z,ce),l(ce,de),p(e,me,r),p(e,ue,r),l(ue,he),l(ue,le),l(le,pe),p(e,fe,r),p(e,ge,r),l(ge,ve),p(e,Ee,r),p(e,qe,r),l(qe,Oe),l(qe,De),l(De,Ce),l(qe,xe),l(qe,je),l(je,ze),l(qe,Ge),l(qe,Ie),l(Ie,we),l(qe,Re),l(qe,Pe),l(Pe,He),l(qe,Me),l(qe,Te),l(Te,Se),l(qe,Ae),l(qe,Fe),l(Fe,Ne),l(qe,Ue),l(qe,ke),l(ke,ye),l(qe,Ke),p(e,Le,r),p(e,Ve,r),l(Ve,Be),l(Ve,Je),l(Je,Qe),p(e,We,r),p(e,Xe,r),l(Xe,Ye),p(e,$e,r),p(e,_e,r),l(_e,ea),l(_e,aa),l(aa,oa),l(_e,ra),l(_e,sa),l(sa,na),l(_e,ta),l(_e,ia),l(ia,ca),l(_e,da),l(_e,ma),l(ma,ua),l(_e,ha),l(_e,la),l(la,pa),l(_e,fa),p(e,ga,r),p(e,va,r),l(va,ba),l(va,Ea),l(Ea,qa),p(e,Oa,r),p(e,Da,r),l(Da,Ca),p(e,ja,r),p(e,za,r),l(za,Ga),l(za,Ia),l(Ia,wa),l(za,Ra),l(za,Pa),l(Pa,Ha),l(za,Ma),l(za,Ta),l(Ta,Sa),l(za,Aa),l(za,Fa),l(Fa,Na),l(za,Ua),l(za,ka),l(ka,ya),l(za,Ka),l(za,La),l(La,Va),l(za,Ba),l(za,Ja),l(Ja,Qa),l(za,Wa),l(za,Xa),l(Xa,Ya),l(za,Za),l(za,$a),l($a,_a),l(za,eo),l(za,ao),l(ao,oo),l(za,ro),l(za,so),l(so,no),l(za,to),l(za,io),l(io,co),l(za,mo),l(za,uo),l(uo,ho),l(za,lo),p(e,po,r),p(e,fo,r),l(fo,go),l(fo,vo),l(vo,bo),p(e,Eo,r),p(e,qo,r),l(qo,Oo),p(e,Co,r),p(e,xo,r),l(xo,jo),l(xo,zo),l(zo,Go),l(xo,Io),l(xo,wo),l(wo,Ro),l(xo,Po),l(xo,Ho),l(Ho,Mo),l(xo,To),l(xo,So),l(So,Ao),l(xo,Fo),l(xo,No),l(No,Uo),l(xo,ko),l(xo,yo),l(yo,Ko),l(xo,Lo),p(e,Vo,r),p(e,Bo,r),l(Bo,Jo),l(Bo,Qo),l(Qo,Wo),p(e,Xo,r),p(e,Yo,r),l(Yo,Zo),p(e,_o,r),p(e,er,r),l(er,ar),l(er,or),l(or,rr),l(er,sr),l(er,nr),l(nr,tr),l(er,ir),l(er,cr),l(cr,dr),l(er,mr),l(er,ur),l(ur,hr),l(er,lr),l(er,pr),l(pr,fr),l(er,gr),l(er,vr),l(vr,br),l(er,Er),l(er,qr),l(qr,Or),l(er,Dr),p(e,Cr,r),p(e,xr,r),l(xr,jr),l(xr,zr),l(zr,Gr),p(e,Ir,r),p(e,wr,r),l(wr,Rr),p(e,Hr,r),p(e,Mr,r),l(Mr,Tr),l(Mr,Sr),l(Sr,Ar),l(Mr,Fr),l(Mr,Nr),l(Nr,Ur),l(Mr,kr),l(Mr,yr),l(yr,Kr),l(Mr,Lr),l(Mr,Vr),l(Vr,Br),l(Mr,Jr),l(Mr,Qr),l(Qr,Wr),l(Mr,Xr),p(e,Yr,r),p(e,Zr,r),l(Zr,$r),p(e,_r,r),p(e,es,r),l(es,as),l(es,os),l(os,rs),l(es,ss),l(es,ns),l(ns,ts),l(es,is),l(es,cs),l(cs,ds),l(es,ms),l(es,us),l(us,hs),l(es,ls),l(es,ps),l(ps,fs),l(es,gs),p(e,vs,r),p(e,bs,r),l(bs,Es),p(e,qs,r),p(e,Os,r),l(Os,Ds)},p:f,i:f,o:f,d(e){c(a),c(o),e&&c(g),e&&c(v),e&&c(q),e&&c(O),e&&c(C),e&&c(x),e&&c(G),e&&c(I),e&&c(U),e&&c(k),e&&c(y),e&&c(K),e&&c(V),e&&c(B),e&&c(Y),e&&c(Z),e&&c(me),e&&c(ue),e&&c(fe),e&&c(ge),e&&c(Ee),e&&c(qe),e&&c(Le),e&&c(Ve),e&&c(We),e&&c(Xe),e&&c($e),e&&c(_e),e&&c(ga),e&&c(va),e&&c(Oa),e&&c(Da),e&&c(ja),e&&c(za),e&&c(po),e&&c(fo),e&&c(Eo),e&&c(qo),e&&c(Co),e&&c(xo),e&&c(Vo),e&&c(Bo),e&&c(Xo),e&&c(Yo),e&&c(_o),e&&c(er),e&&c(Cr),e&&c(xr),e&&c(Ir),e&&c(wr),e&&c(Hr),e&&c(Mr),e&&c(Yr),e&&c(Zr),e&&c(_r),e&&c(es),e&&c(vs),e&&c(bs),e&&c(qs),e&&c(Os)}}}export default class extends e{constructor(e){super(),a(this,e,null,g,o,{})}}
