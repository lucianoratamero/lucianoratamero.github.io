import{S as o,i as a,s as e,E as r,w as s,F as n,G as i,c as t,e as m,x as c,d as u,H as d,k as p,I as l,g,n as h}from"./client.ba4c128a.js";function v(o){let a,e,v,f,b,q,E,j,G,R,k,I,z,T,y,O,P,S,x,N,H,M,F,U,A,w,C,D,K,L,B,J,Q,V,W,X,Y,Z,$,_,oo,ao,eo,ro,so,no,io,to,mo,co,uo,po,lo,go,ho,vo,fo,bo,qo,Eo,jo,Go,Ro,ko,Io,zo,To,yo,Oo,Po,So,xo,No,Ho,Mo,Fo,Uo,Ao,wo,Co,Do,Ko,Lo,Bo,Jo,Qo,Vo,Wo,Xo,Yo,Zo,$o,_o,oa,aa,ea,ra,sa,na,ia,ta,ma,ca,ua,da,pa,la,ga,ha,va,fa,ba,qa,Ea,ja,Ga,Ra,ka,Ia,za,Ta,ya,Oa,Pa,Sa,xa,Na,Ha,Ma,Fa,Ua,Aa,wa,Ca,Da,Ka,La,Ba,Ja,Qa,Va,Wa,Xa;return{c(){a=r("meta"),e=r("meta"),v=s(),f=r("h1"),b=r("mark"),q=n("git e github parte 2: conceitos básicos para trabalhar com git"),E=s(),j=r("p"),G=n("2016-02-18"),R=s(),k=r("figure"),I=r("img"),T=s(),y=r("p"),O=n("eis que voltamos para a parte 2 dos posts sobre git e github! dessa vez, vou\n  discutir alguns conceitos básicos necessários para quem quer trabalhar com\n  git. se ainda não leu o primeiro post,\n  "),P=r("a"),S=n("façam\n    o favor"),x=n(", porque não vou explicar de novo (#ranzinza). então vamos lá!"),N=s(),H=r("hr"),M=s(),F=r("h3"),U=n("merge e conflitos"),A=s(),w=r("p"),C=n("a última coisa que discutimos no último post foi a questão de termos branchs\n  diferentes para commits e tarefas diferentes. ter múltiplos branchs é\n  importante para que uma tarefa não influencie na outra, mas o que importa no\n  final das contas é que todas as tarefas estejam prontas, juntas, entregues."),D=s(),K=r("figure"),L=r("img"),J=s(),Q=r("p"),V=n("pra isso, os branchs paralelos precisam ser misturados novamente em um só,\n  usando o processo que chamamos de\n  "),W=r("strong"),X=n("merge"),Y=n(".\n  "),Z=r("strong"),$=n("merge"),_=n("\n  significa, ao pé da letra,\n  "),oo=r("strong"),ao=n("convergir"),eo=n(". essa convergência é necessária para que saibamos\n  que tudo funciona em conjunto e para que possamos criar uma nova versão do\n  projeto que está sendo desenvolvido."),ro=s(),so=r("p"),no=n("isso se complica na hora que pensamos que, em branchs diferentes, os\n  desenvolvedores podem mudar o mesmo arquivo, na mesma linha. quando isso\n  acontece, ocorre o que chamamos de\n  "),io=r("strong"),to=n("conflito"),mo=n(". na hora do merge, o git tenta misturar o código (e\n  geralmente é bem inteligente em se resolver sozinho), mas quando conflitos\n  acontecem, é necessária intervenção manual no código para que tudo funcione\n  bonitinho, então fiquem ligados pra que seu processo se adapte visando evitar\n  conflitos."),co=s(),uo=r("h3"),po=n("cherry-pick"),lo=s(),go=r("p"),ho=n("digamos que no branch 1 temos uma tarefa e no 2, outra. pode acontecer o caso\n  de que o branch 2 desenvolva algo que seria importante para o desenvolvimento\n  do 1, mas, obviamente, temos o código de um separado do outro. nessas horas,\n  podemos usar o\n  "),vo=r("strong"),fo=n("cherry-pick"),bo=n("."),qo=s(),Eo=r("figure"),jo=r("img"),Ro=s(),ko=r("p"),Io=r("strong"),zo=n("cherry-pick"),To=n("\n  é o processo de pegar um commit específico, ou uma série de commits, e\n  copiá-lo(s) para outro branch. pode ficar tranquilo, isso não vai interferir\n  na hora do merge (mas pode dar a ilusão de que mais coisas foram mudadas na\n  hora de gerar um pull request). use o cherry-pick com\n  "),yo=r("strong"),Oo=n("muita"),Po=n("\n  parcimônia."),So=s(),xo=r("h3"),No=n("rebase"),Ho=s(),Mo=r("p"),Fo=n("muitas vezes acontece de você criar um branch a partir de outro, mas perceber\n  que devia ter esperado mais, porque foi feita alguma nova alteração importante\n  no branch base. nessas horas, você pode usar o\n  "),Uo=r("strong"),Ao=n("rebase"),wo=n("."),Co=s(),Do=r("figure"),Ko=r("img"),Bo=s(),Jo=r("p"),Qo=r("strong"),Vo=n("rebase"),Wo=n("\n  é o ato de mudar o commit base de uma série de commits. ele é útil em alguns\n  momentos, mas deve ser\n  "),Xo=r("strong"),Yo=n("evitado"),Zo=n(", já que ele\n  "),$o=r("strong"),_o=n("altera o histórico do git e pode gerar inconsistências de dados"),oa=n("\n  quando mais de uma pessoa está trabalhando no mesmo branch."),aa=s(),ea=r("p"),ra=n("a maior utilidade que vejo no rebase é na hora em que você faz um commit local\n  e, nesse meio tempo, alguém enviou um novo commit no repositório. nesse\n  momento, para evitar um commit de merge na hora de sicronizar o código, você\n  pode simplesmente usar o comando\n  "),sa=r("code"),na=n("git pull --rebase"),ia=n("\n  pra pegar seu commit e colocar logo em seguida do que estava no repositório\n  remoto."),ta=s(),ma=r("h3"),ca=n("remotes"),ua=s(),da=r("p"),pa=n("uma das coisas mais interessantes do git é a possibilidade de configurar\n  múltiplas origens pra um mesmo projeto. assim, podemos enviar código de um\n  projeto para múltiplos repositórios, e isso é feito a partir da configurações\n  de\n  "),la=r("strong"),ga=n("remotes"),ha=n("."),va=s(),fa=r("figure"),ba=r("img"),Ea=s(),ja=r("p"),Ga=n("geralmente, só temos uma origem remota pra cada projeto, mas podemos ter, por\n  exemplo, um outro repositório remoto configurado para fazer o deploy da\n  aplicação. esse processo é usado por alguns serviços de hospedagem de site,\n  como o\n  "),Ra=r("a"),ka=n("heroku"),Ia=n("."),za=s(),Ta=r("h3"),ya=n("tag"),Oa=s(),Pa=r("p"),Sa=n("quando você tem vários commits com várias funcionalidades diferentes, você\n  tende a não saber mais muito bem em qual commit que tal feature ficou pronta.\n  para que você possa nomear o estado do projeto em um commit específico, você\n  pode usar uma\n  "),xa=r("strong"),Na=n("tag"),Ha=n("."),Ma=s(),Fa=r("figure"),Ua=r("img"),wa=s(),Ca=r("p"),Da=n("uma\n  "),Ka=r("strong"),La=n("tag"),Ba=n("\n  nada mais é do que um atalho a um commit específico, que descreve um estado do\n  seu projeto. você pode, por exemplo, nomear de 1.0 a versão inicial de seu\n  projeto e ir criando novas tags pra cada nova versão de produção."),Ja=s(),Qa=r("hr"),Va=s(),Wa=r("p"),Xa=n("por hoje, acho que é isso, pessoal. no próximo, e último post, vou discutir um\n  pouco sobre boas práticas para desenvolvimento usando git. caso tenham alguma\n  dúvida ou sugestão, só mandarem ver nos comentários, sim? abraços, e até a\n  próxima! o/"),this.h()},l(o){const r=i('[data-svelte="svelte-1ntykkr"]',document.head);a=t(r,"META",{name:!0,content:!0}),e=t(r,"META",{name:!0,content:!0}),r.forEach(m),v=c(o),f=t(o,"H1",{});var s=u(f);b=t(s,"MARK",{});var n=u(b);q=d(n,"git e github parte 2: conceitos básicos para trabalhar com git"),n.forEach(m),s.forEach(m),E=c(o),j=t(o,"P",{class:!0});var p=u(j);G=d(p,"2016-02-18"),p.forEach(m),R=c(o),k=t(o,"FIGURE",{});var l=u(k);I=t(l,"IMG",{src:!0,alt:!0}),l.forEach(m),T=c(o),y=t(o,"P",{});var g=u(y);O=d(g,"eis que voltamos para a parte 2 dos posts sobre git e github! dessa vez, vou\n  discutir alguns conceitos básicos necessários para quem quer trabalhar com\n  git. se ainda não leu o primeiro post,\n  "),P=t(g,"A",{href:!0});var h=u(P);S=d(h,"façam\n    o favor"),h.forEach(m),x=d(g,", porque não vou explicar de novo (#ranzinza). então vamos lá!"),g.forEach(m),N=c(o),H=t(o,"HR",{}),M=c(o),F=t(o,"H3",{});var z=u(F);U=d(z,"merge e conflitos"),z.forEach(m),A=c(o),w=t(o,"P",{});var B=u(w);C=d(B,"a última coisa que discutimos no último post foi a questão de termos branchs\n  diferentes para commits e tarefas diferentes. ter múltiplos branchs é\n  importante para que uma tarefa não influencie na outra, mas o que importa no\n  final das contas é que todas as tarefas estejam prontas, juntas, entregues."),B.forEach(m),D=c(o),K=t(o,"FIGURE",{});var Go=u(K);L=t(Go,"IMG",{src:!0,alt:!0}),Go.forEach(m),J=c(o),Q=t(o,"P",{});var Lo=u(Q);V=d(Lo,"pra isso, os branchs paralelos precisam ser misturados novamente em um só,\n  usando o processo que chamamos de\n  "),W=t(Lo,"STRONG",{});var qa=u(W);X=d(qa,"merge"),qa.forEach(m),Y=d(Lo,".\n  "),Z=t(Lo,"STRONG",{});var Aa=u(Z);$=d(Aa,"merge"),Aa.forEach(m),_=d(Lo,"\n  significa, ao pé da letra,\n  "),oo=t(Lo,"STRONG",{});var Ya=u(oo);ao=d(Ya,"convergir"),Ya.forEach(m),eo=d(Lo,". essa convergência é necessária para que saibamos\n  que tudo funciona em conjunto e para que possamos criar uma nova versão do\n  projeto que está sendo desenvolvido."),Lo.forEach(m),ro=c(o),so=t(o,"P",{});var Za=u(so);no=d(Za,"isso se complica na hora que pensamos que, em branchs diferentes, os\n  desenvolvedores podem mudar o mesmo arquivo, na mesma linha. quando isso\n  acontece, ocorre o que chamamos de\n  "),io=t(Za,"STRONG",{});var $a=u(io);to=d($a,"conflito"),$a.forEach(m),mo=d(Za,". na hora do merge, o git tenta misturar o código (e\n  geralmente é bem inteligente em se resolver sozinho), mas quando conflitos\n  acontecem, é necessária intervenção manual no código para que tudo funcione\n  bonitinho, então fiquem ligados pra que seu processo se adapte visando evitar\n  conflitos."),Za.forEach(m),co=c(o),uo=t(o,"H3",{});var _a=u(uo);po=d(_a,"cherry-pick"),_a.forEach(m),lo=c(o),go=t(o,"P",{});var oe=u(go);ho=d(oe,"digamos que no branch 1 temos uma tarefa e no 2, outra. pode acontecer o caso\n  de que o branch 2 desenvolva algo que seria importante para o desenvolvimento\n  do 1, mas, obviamente, temos o código de um separado do outro. nessas horas,\n  podemos usar o\n  "),vo=t(oe,"STRONG",{});var ae=u(vo);fo=d(ae,"cherry-pick"),ae.forEach(m),bo=d(oe,"."),oe.forEach(m),qo=c(o),Eo=t(o,"FIGURE",{});var ee=u(Eo);jo=t(ee,"IMG",{src:!0,alt:!0}),ee.forEach(m),Ro=c(o),ko=t(o,"P",{});var re=u(ko);Io=t(re,"STRONG",{});var se=u(Io);zo=d(se,"cherry-pick"),se.forEach(m),To=d(re,"\n  é o processo de pegar um commit específico, ou uma série de commits, e\n  copiá-lo(s) para outro branch. pode ficar tranquilo, isso não vai interferir\n  na hora do merge (mas pode dar a ilusão de que mais coisas foram mudadas na\n  hora de gerar um pull request). use o cherry-pick com\n  "),yo=t(re,"STRONG",{});var ne=u(yo);Oo=d(ne,"muita"),ne.forEach(m),Po=d(re,"\n  parcimônia."),re.forEach(m),So=c(o),xo=t(o,"H3",{});var ie=u(xo);No=d(ie,"rebase"),ie.forEach(m),Ho=c(o),Mo=t(o,"P",{});var te=u(Mo);Fo=d(te,"muitas vezes acontece de você criar um branch a partir de outro, mas perceber\n  que devia ter esperado mais, porque foi feita alguma nova alteração importante\n  no branch base. nessas horas, você pode usar o\n  "),Uo=t(te,"STRONG",{});var me=u(Uo);Ao=d(me,"rebase"),me.forEach(m),wo=d(te,"."),te.forEach(m),Co=c(o),Do=t(o,"FIGURE",{});var ce=u(Do);Ko=t(ce,"IMG",{src:!0,alt:!0}),ce.forEach(m),Bo=c(o),Jo=t(o,"P",{});var ue=u(Jo);Qo=t(ue,"STRONG",{});var de=u(Qo);Vo=d(de,"rebase"),de.forEach(m),Wo=d(ue,"\n  é o ato de mudar o commit base de uma série de commits. ele é útil em alguns\n  momentos, mas deve ser\n  "),Xo=t(ue,"STRONG",{});var pe=u(Xo);Yo=d(pe,"evitado"),pe.forEach(m),Zo=d(ue,", já que ele\n  "),$o=t(ue,"STRONG",{});var le=u($o);_o=d(le,"altera o histórico do git e pode gerar inconsistências de dados"),le.forEach(m),oa=d(ue,"\n  quando mais de uma pessoa está trabalhando no mesmo branch."),ue.forEach(m),aa=c(o),ea=t(o,"P",{});var ge=u(ea);ra=d(ge,"a maior utilidade que vejo no rebase é na hora em que você faz um commit local\n  e, nesse meio tempo, alguém enviou um novo commit no repositório. nesse\n  momento, para evitar um commit de merge na hora de sicronizar o código, você\n  pode simplesmente usar o comando\n  "),sa=t(ge,"CODE",{});var he=u(sa);na=d(he,"git pull --rebase"),he.forEach(m),ia=d(ge,"\n  pra pegar seu commit e colocar logo em seguida do que estava no repositório\n  remoto."),ge.forEach(m),ta=c(o),ma=t(o,"H3",{});var ve=u(ma);ca=d(ve,"remotes"),ve.forEach(m),ua=c(o),da=t(o,"P",{});var fe=u(da);pa=d(fe,"uma das coisas mais interessantes do git é a possibilidade de configurar\n  múltiplas origens pra um mesmo projeto. assim, podemos enviar código de um\n  projeto para múltiplos repositórios, e isso é feito a partir da configurações\n  de\n  "),la=t(fe,"STRONG",{});var be=u(la);ga=d(be,"remotes"),be.forEach(m),ha=d(fe,"."),fe.forEach(m),va=c(o),fa=t(o,"FIGURE",{});var qe=u(fa);ba=t(qe,"IMG",{src:!0,alt:!0}),qe.forEach(m),Ea=c(o),ja=t(o,"P",{});var Ee=u(ja);Ga=d(Ee,"geralmente, só temos uma origem remota pra cada projeto, mas podemos ter, por\n  exemplo, um outro repositório remoto configurado para fazer o deploy da\n  aplicação. esse processo é usado por alguns serviços de hospedagem de site,\n  como o\n  "),Ra=t(Ee,"A",{href:!0});var je=u(Ra);ka=d(je,"heroku"),je.forEach(m),Ia=d(Ee,"."),Ee.forEach(m),za=c(o),Ta=t(o,"H3",{});var Ge=u(Ta);ya=d(Ge,"tag"),Ge.forEach(m),Oa=c(o),Pa=t(o,"P",{});var Re=u(Pa);Sa=d(Re,"quando você tem vários commits com várias funcionalidades diferentes, você\n  tende a não saber mais muito bem em qual commit que tal feature ficou pronta.\n  para que você possa nomear o estado do projeto em um commit específico, você\n  pode usar uma\n  "),xa=t(Re,"STRONG",{});var ke=u(xa);Na=d(ke,"tag"),ke.forEach(m),Ha=d(Re,"."),Re.forEach(m),Ma=c(o),Fa=t(o,"FIGURE",{});var Ie=u(Fa);Ua=t(Ie,"IMG",{src:!0,alt:!0}),Ie.forEach(m),wa=c(o),Ca=t(o,"P",{});var ze=u(Ca);Da=d(ze,"uma\n  "),Ka=t(ze,"STRONG",{});var Te=u(Ka);La=d(Te,"tag"),Te.forEach(m),Ba=d(ze,"\n  nada mais é do que um atalho a um commit específico, que descreve um estado do\n  seu projeto. você pode, por exemplo, nomear de 1.0 a versão inicial de seu\n  projeto e ir criando novas tags pra cada nova versão de produção."),ze.forEach(m),Ja=c(o),Qa=t(o,"HR",{}),Va=c(o),Wa=t(o,"P",{});var ye=u(Wa);Xa=d(ye,"por hoje, acho que é isso, pessoal. no próximo, e último post, vou discutir um\n  pouco sobre boas práticas para desenvolvimento usando git. caso tenham alguma\n  dúvida ou sugestão, só mandarem ver nos comentários, sim? abraços, e até a\n  próxima! o/"),ye.forEach(m),this.h()},h(){document.title="\n    git e github parte 2: conceitos básicos para trabalhar com git -\n    luciano@ratamero.com\n  ",p(a,"name","description"),p(a,"content","Esse post explica os conceitos básicos de Git e como ele interaje com o Github; tudo isso da forma mais didática possível :]"),p(e,"name","keywords"),p(e,"content","Luciano Ratamero, git, github, conceitos básicos de git, parte 2"),p(j,"class","meta"),I.src!==(z="https://lucianoratamero.github.io/img/cover-git-2.png")&&p(I,"src","https://lucianoratamero.github.io/img/cover-git-2.png"),p(I,"alt","Ilustração com logo do git e do github"),p(P,"href","https://lucianoratamero.github.io/blog/git-e-github-parte-1-o-que-sao-e-como-usar/"),L.src!==(B="https://lucianoratamero.github.io/img/merge.jpg")&&p(L,"src","https://lucianoratamero.github.io/img/merge.jpg"),p(L,"alt","Ilustração de um merge, de uma branch se encontrando com a outra"),jo.src!==(Go="https://lucianoratamero.github.io/img/cherry-pick.jpg")&&p(jo,"src","https://lucianoratamero.github.io/img/cherry-pick.jpg"),p(jo,"alt","Ilustração de um cherry-pick, um commit de uma branch copiado para outra"),Ko.src!==(Lo="https://lucianoratamero.github.io/img/rebase.jpg")&&p(Ko,"src","https://lucianoratamero.github.io/img/rebase.jpg"),p(Ko,"alt","Ilustração de um rebase, uma branch mudando sua base para outro commit"),ba.src!==(qa="https://lucianoratamero.github.io/img/remotes.jpg")&&p(ba,"src","https://lucianoratamero.github.io/img/remotes.jpg"),p(ba,"alt","Ilustração de um remote, um repo apontando para múltiplas nuvens"),p(Ra,"href","https://heroku.com/"),Ua.src!==(Aa="https://lucianoratamero.github.io/img/tag.jpg")&&p(Ua,"src","https://lucianoratamero.github.io/img/tag.jpg"),p(Ua,"alt","Ilustração de uma tag")},m(o,r){l(document.head,a),l(document.head,e),g(o,v,r),g(o,f,r),l(f,b),l(b,q),g(o,E,r),g(o,j,r),l(j,G),g(o,R,r),g(o,k,r),l(k,I),g(o,T,r),g(o,y,r),l(y,O),l(y,P),l(P,S),l(y,x),g(o,N,r),g(o,H,r),g(o,M,r),g(o,F,r),l(F,U),g(o,A,r),g(o,w,r),l(w,C),g(o,D,r),g(o,K,r),l(K,L),g(o,J,r),g(o,Q,r),l(Q,V),l(Q,W),l(W,X),l(Q,Y),l(Q,Z),l(Z,$),l(Q,_),l(Q,oo),l(oo,ao),l(Q,eo),g(o,ro,r),g(o,so,r),l(so,no),l(so,io),l(io,to),l(so,mo),g(o,co,r),g(o,uo,r),l(uo,po),g(o,lo,r),g(o,go,r),l(go,ho),l(go,vo),l(vo,fo),l(go,bo),g(o,qo,r),g(o,Eo,r),l(Eo,jo),g(o,Ro,r),g(o,ko,r),l(ko,Io),l(Io,zo),l(ko,To),l(ko,yo),l(yo,Oo),l(ko,Po),g(o,So,r),g(o,xo,r),l(xo,No),g(o,Ho,r),g(o,Mo,r),l(Mo,Fo),l(Mo,Uo),l(Uo,Ao),l(Mo,wo),g(o,Co,r),g(o,Do,r),l(Do,Ko),g(o,Bo,r),g(o,Jo,r),l(Jo,Qo),l(Qo,Vo),l(Jo,Wo),l(Jo,Xo),l(Xo,Yo),l(Jo,Zo),l(Jo,$o),l($o,_o),l(Jo,oa),g(o,aa,r),g(o,ea,r),l(ea,ra),l(ea,sa),l(sa,na),l(ea,ia),g(o,ta,r),g(o,ma,r),l(ma,ca),g(o,ua,r),g(o,da,r),l(da,pa),l(da,la),l(la,ga),l(da,ha),g(o,va,r),g(o,fa,r),l(fa,ba),g(o,Ea,r),g(o,ja,r),l(ja,Ga),l(ja,Ra),l(Ra,ka),l(ja,Ia),g(o,za,r),g(o,Ta,r),l(Ta,ya),g(o,Oa,r),g(o,Pa,r),l(Pa,Sa),l(Pa,xa),l(xa,Na),l(Pa,Ha),g(o,Ma,r),g(o,Fa,r),l(Fa,Ua),g(o,wa,r),g(o,Ca,r),l(Ca,Da),l(Ca,Ka),l(Ka,La),l(Ca,Ba),g(o,Ja,r),g(o,Qa,r),g(o,Va,r),g(o,Wa,r),l(Wa,Xa)},p:h,i:h,o:h,d(o){m(a),m(e),o&&m(v),o&&m(f),o&&m(E),o&&m(j),o&&m(R),o&&m(k),o&&m(T),o&&m(y),o&&m(N),o&&m(H),o&&m(M),o&&m(F),o&&m(A),o&&m(w),o&&m(D),o&&m(K),o&&m(J),o&&m(Q),o&&m(ro),o&&m(so),o&&m(co),o&&m(uo),o&&m(lo),o&&m(go),o&&m(qo),o&&m(Eo),o&&m(Ro),o&&m(ko),o&&m(So),o&&m(xo),o&&m(Ho),o&&m(Mo),o&&m(Co),o&&m(Do),o&&m(Bo),o&&m(Jo),o&&m(aa),o&&m(ea),o&&m(ta),o&&m(ma),o&&m(ua),o&&m(da),o&&m(va),o&&m(fa),o&&m(Ea),o&&m(ja),o&&m(za),o&&m(Ta),o&&m(Oa),o&&m(Pa),o&&m(Ma),o&&m(Fa),o&&m(wa),o&&m(Ca),o&&m(Ja),o&&m(Qa),o&&m(Va),o&&m(Wa)}}}export default class extends o{constructor(o){super(),a(this,o,null,v,e,{})}}
